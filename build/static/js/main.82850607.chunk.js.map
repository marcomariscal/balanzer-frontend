{"version":3,"sources":["components/hooks/useLocalStorage.js","actions/general.js","actions/types.js","components/BackendAPI.js","actions/assets.js","actions/currentUser.js","components/ExchangeDropDown.js","components/Spinner.js","components/PrimaryButton.js","components/SettingsDropDown.js","components/Navigation.js","components/Home.js","components/PrivateRoute.js","components/Alert.js","components/Login.js","actions/exchanges.js","components/Exchange.js","components/Exchanges.js","helpers/exchangesWithPassphrase.js","components/ExchangeConnectionForm.js","components/ExchangeConnection.js","components/Summary.js","helpers/currencyHelpers.js","components/AssetImage.js","components/TableItem.js","components/Toggle.js","components/BalancesTable.js","components/BalanceChart.js","components/Dashboard.js","helpers/timeframes.js","actions/rebalance.js","components/RebalancePeriodSelectModal.js","components/EditBarTableItem.js","helpers/balanceHelpers.js","components/AssetPickerModal.js","components/EditRebalanceStrategyForm.js","components/BarTableItem.js","components/BarTable.js","components/Automate.js","helpers/exchangeRates.js","components/SwapAsset.js","actions/trades.js","components/TradeWidget.js","components/Trade.js","components/Backtest.js","components/Routes.js","components/App.js","serviceWorker.js","reducers/currentUser.js","reducers/exchanges.js","reducers/assets.js","reducers/users.js","reducers/general.js","reducers/trades.js","reducers/rebalance.js","reducers/root.js","components/store.js","index.js"],"names":["useLocalStorage","key","firstValue","initialValue","localStorage","getItem","useState","item","setItem","useEffect","removeItem","showErrors","msgs","type","BASE_URL","process","REACT_APP_BASE_URL","BackendAPI","endpoint","params","verb","_token","TOKEN_STORAGE_ID","console","debug","q","axios","get","post","patch","delete","data","error","response","message","Array","isArray","this","request","res","exchanges","exchange","assets","tickers","username","user","users","accounts","accountId","account","date","balances","timeframe","balanceHistory","userId","permissions","trade","rebalancePeriod","rebalanceStrategy","allocations","isDynamic","getExchangeAssetsFromAPI","dispatch","a","getExchangeAssets","registerUserWithAPI","register","getUser","newUser","updateCurrentUserInStore","authSuccess","loginUserWithAPI","login","loggedUser","syncUserData","updateCurrentUser","fetchAccounts","accountDeleted","stopCreatingAccount","createAccountSuccessInState","accountName","createAccountSuccess","fetchBalances","getAccounts","length","resetUserAccountInfo","accountIdToUse","id","getAccount","currAccount","updateCurrentAccount","getAccountBalances","getPermissionsFromAPI","userDataUpdated","getPermissions","updatePermissionsInAPI","updatePermissions","getRebalancePeriodFromAPI","getRebalancePeriod","updatedRebalancePeriod","getRebalanceStrategyFromAPI","getRebalanceStrategy","ExchangeDropDown","useDispatch","useSelector","st","currentUser","currentAccount","notCurrentAccounts","e","target","value","accountsWithoutCurrentRender","map","NavDropdown","Item","onClick","title","className","Image","src","icon","alt","as","Link","to","Spinner","animation","PrimaryButton","submitFunc","textDisabled","textPrimary","loadingText","disabled","loading","variant","size","SettingsDropDown","history","useHistory","loadingTradePermish","setLoadingTradePermish","loadingAccountPermish","setLoadingAccountPermish","deletingAccount","setDeletingAccount","faCog","stopPropagation","onColor","onChange","checked","height","width","handleDiameter","deleteAccount","push","Navigation","logout","state","loggedInRender","Nav","faLayerGroup","faBolt","faExchangeAlt","faDatabase","loggedOutRender","Navbar","Brand","Home","Button","PrivateRoute","exact","path","children","Alert","messages","role","defaultProps","Login","setToken","isLoading","setIsLoading","activeView","setActiveView","password","email","formErrors","loginInfo","setLoginInfo","handleSubmit","preventDefault","BackendApi","token","l","handleChange","name","loginActive","signupFields","onSubmit","getExchangesFromAPI","getExchanges","Exchange","Card","style","Body","Exchanges","general","CardDeck","i","ExchangeConnectionForm","exchangeName","creatingAccount","hasPassphrase","exchangesWithPassphrases","indexOf","publicKey","privateKey","passphrase","formData","setFormData","inValidForm","setInvalidForm","fData","autoComplete","Form","Group","Label","Control","placeholder","Text","accountData","shrimpy_user_id","createAccount","newAccount","createAccountInAPI","errors","ExchangeConnection","useParams","Summary","subTitle","formatUSD","val","toFixed","formatNative","AssetImage","symbol","svgLink","pngLink","onError","onerror","TableItem","Toggle","handleToggle","textSecondary","render","BalancesTable","usdValueSelected","toggleUsdValueSelected","tableRender","bal","usdValue","nativeValue","Table","BalanceChart","setTimeframe","persist","getAccountBalanceHistory","getBalanceHistoryFromAPI","periodMenuRender","t","renderChart","margin","right","left","dataKey","stroke","Dashboard","totalBalanceUSD","rebalancePeriodTimeframes","Map","showRebalanceAssetSelectModalInState","closeRebalancePeriodModal","closeRebalanceAssetSelectModal","RebalancePeriodSelectModal","showModal","closeModal","Modal","scrollable","show","onHide","centered","Header","closeButton","Title","values","EditBarTableItem","asset","targetAllocation","actualAllocation","handleChangeComplete","setData","maxValue","minValue","onChangeComplete","total","reduce","acc","curr","getTokenBalance","tokenSymbol","balance","filter","AssetPickerModal","handleAssetSelect","modalType","trades","EditRebalanceStrategyForm","cancelEdit","rebalanceStrategyForm","setRebalanceStrategy","handleAddAsset","submitStrategy","showRebalanceAssetSelectModal","rebalance","isInvalidForm","setIsInvalidForm","detail","allocationPct","pctTotal","actualPctOfTotal","BarTableItem","BarTable","handleEdit","Automate","showRebalancePeriodModal","isEditingStrategy","setIsEditingStrategy","setRebalanceStrategyForm","handleAddAssetToStrategy","strat","getRebalanceInfo","handleEditRebalanceStrategy","edit","rebalancePeriodText","has","faEdit","setRebalancePeriod","setRebalancePeriodInAPI","percent","toString","setRebalanceStrategyInAPI","getExchangeRateValue","asset1","asset2","asset1amount","getExchangeTickers","ticker","asset1PriceUsd","priceUsd","asset2PriceUsd","exchangeRateValue","SwapAsset","onValueChange","onAssetChange","onMaxValueSelect","showTradeModal","InputGroup","FormControl","updateModalType","faAngleDown","TradeWidget","submittingTrade","shallowEqual","input","output","tradeErrors","tradeDetails","setTradeDetails","handleValueChange","handleAssetChange","inputBalance","outputBalance","getOutputValue","faArrowDown","danger","fromSymbol","toSymbol","amount","createTrade","Trade","Backtest","Routes","App","decode","syncUserInfo","Boolean","window","location","hostname","match","INITIAL_STATE","permissionsUpdated","sortByAssetBalance","sort","b","sortByExchangeName","sortByExchangeAssetSymbols","allUsers","combineReducers","action","accountCreated","userDataUpdatedAt","Date","now","rebalanceInitiated","valueNative","filledTrades","latestTrade","persistConfig","storage","stateReconciler","autoMergeLevel2","persistedReducer","persistReducer","root","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistedStore","persistStore","ReactDOM","persistor","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.82850607.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nfunction useLocalStorage(key, firstValue = null) {\r\n  const initialValue = localStorage.getItem(key) || firstValue;\r\n\r\n  const [item, setItem] = useState(initialValue);\r\n\r\n  useEffect(() => {\r\n    if (!item) {\r\n      localStorage.removeItem(key);\r\n    } else {\r\n      localStorage.setItem(key, item);\r\n    }\r\n  }, [key, item]);\r\n\r\n  return [item, setItem];\r\n}\r\n\r\nexport default useLocalStorage;\r\n","import {\r\n  SHOW_SPINNER,\r\n  END_SHOW_SPINNER,\r\n  SHOW_ERRORS,\r\n  RESET_ERRORS,\r\n} from \"./types\";\r\n\r\nexport function startLoad() {\r\n  return {\r\n    type: SHOW_SPINNER,\r\n  };\r\n}\r\n\r\nexport function stopLoad() {\r\n  return {\r\n    type: END_SHOW_SPINNER,\r\n  };\r\n}\r\n\r\nexport function showErrors(msgs) {\r\n  return {\r\n    type: SHOW_ERRORS,\r\n    msgs,\r\n  };\r\n}\r\n\r\nexport function resetErrors() {\r\n  return {\r\n    type: RESET_ERRORS,\r\n  };\r\n}\r\n","// exchanges types\r\nexport const FETCH_EXCHANGES = \"FETCH_EXCHANGES\";\r\nexport const FETCH_EXCHANGE_ASSETS = \"FETCH_EXCHANGE_ASSETS\";\r\n\r\n// currentUser types\r\nexport const UPDATE_CURRENT_USER = \"UPDATE_CURRENT_USER\";\r\nexport const LOGOUT_CURRENT_USER = \"LOGOUT_CURRENT_USER\";\r\nexport const AUTH_SUCCESS = \"AUTH_SUCCESS\";\r\nexport const FETCH_ACCOUNTS = \"FETCH_ACCOUNTS\";\r\nexport const UPDATE_CURRENT_ACCOUNT = \"UPDATE_CURRENT_ACCOUNT\";\r\nexport const FETCH_BALANCES = \"FETCH_BALANCES\";\r\nexport const FETCH_BALANCE_HISTORY = \"FETCH_BALANCE_HISTORY\";\r\nexport const ACCOUNT_CREATED = \"ACCOUNT_CREATED\";\r\nexport const START_CREATE_ACCOUNT = \"START_CREATE_ACCOUNT\";\r\nexport const END_CREATE_ACCOUNT = \"END_CREATE_ACCOUNT\";\r\nexport const ACCOUNT_CREATED_SUCCESS = \"ACCOUNT_CREATED_SUCCESS\";\r\nexport const FETCH_PERMISSIONS = \"FETCH_PERMISSIONS\";\r\nexport const PERMISSIONS_UPDATED = \"PERMISSIONS_UPDATED\";\r\nexport const ACCOUNT_DELETED = \"ACCOUNT_DELETED\";\r\nexport const USER_DATA_UPDATED = \"USER_DATA_UPDATED\";\r\nexport const RESET_USER_ACCOUNT_INFO = \"RESET_USER_ACCOUNT_INFO\";\r\nexport const FETCH_REBALANCE_PERIOD = \"FETCH_REBALANCE_PERIOD\";\r\nexport const REBALANCE_PERIOD_UPDATED = \"REBALANCE_PERIOD_UPDATED\";\r\nexport const REBALANCE_INITIATED = \"REBALANCE_INITIATED\";\r\nexport const FETCH_REBALANCE_STRATEGY = \"FETCH_REBALANCE_STRATEGY\";\r\nexport const REBALANCE_STRATEGY_UPDATED = \"REBALANCE_STRATEGY_UPDATED\";\r\nexport const CLEAR_REBALANCE_STRATEGY = \"CLEAR_REBALANCE_STRATEGY\";\r\n\r\n// users types\r\nexport const FETCH_USER = \"FETCH_USER\";\r\nexport const FETCH_USERS = \"FETCH_USERS\";\r\n\r\n// general types\r\nexport const SHOW_ERRORS = \"SHOW_ERRORS\";\r\nexport const RESET_ERRORS = \"RESET_ERRORS\";\r\nexport const SHOW_SPINNER = \"SHOW_SPINNER\";\r\nexport const END_SHOW_SPINNER = \"END_SHOW_SPINNER\";\r\n\r\n// trades types\r\nexport const FETCH_TRADES = \"FETCH_TRADES\";\r\nexport const TRADE_SELECT_INPUT = \"TRADE_SELECT_INPUT\";\r\nexport const TRADE_SELECT_OUTPUT = \"TRADE_SELECT_OUTPUT\";\r\nexport const SHOW_TRADE_MODAL = \"SHOW_TRADE_MODAL\";\r\nexport const CLOSE_TRADE_MODAL = \"CLOSE_TRADE_MODAL\";\r\nexport const UPDATE_TRADE_DETAILS = \"UPDATE_TRADE_DETAILS\";\r\nexport const TRADE_SELECT_OUTPUT_VALUE = \"TRADE_SELECT_OUTPUT_VALUE\";\r\nexport const TRADE_SELECT_INPUT_VALUE = \"TRADE_SELECT_INPUT_VALUE\";\r\nexport const UPDATE_MODAL_TYPE = \"UPDATE_MODAL_TYPE\";\r\nexport const UPDATE_LATEST_TRADE = \"UPDATE_LATEST_TRADE\";\r\nexport const SUBMIT_TRADE_START = \"SUBMIT_TRADE_START\";\r\nexport const SUBMIT_TRADE_END = \"SUBMIT_TRADE_END\";\r\n\r\n// rebalance types\r\nexport const SHOW_REBALANCE_PERIOD_MODAL = \"SHOW_REBALANCE_PERIOD_MODAL\";\r\nexport const SHOW_REBALANCE_ASSET_SELECT_MODAL =\r\n  \"SHOW_REBALANCE_ASSET_SELECT_MODAL\";\r\nexport const CLOSE_REBALANCE_PERIOD_MODAL = \"CLOSE_REBALANCE_PERIOD_MODAL\";\r\nexport const CLOSE_REBALANCE_ASSET_SELECT_MODAL =\r\n  \"CLOSE_REBALANCE_ASSET_SELECT_MODAL\";\r\n","import axios from \"axios\";\r\nimport { TOKEN_STORAGE_ID } from \"./App\";\r\n\r\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\r\n\r\nclass BackendAPI {\r\n  static async request(endpoint, params = {}, verb = \"get\") {\r\n    let _token = localStorage.getItem(TOKEN_STORAGE_ID);\r\n\r\n    console.debug(\"API Call:\", endpoint, params, verb);\r\n\r\n    let q;\r\n\r\n    if (verb === \"get\") {\r\n      q = axios.get(`${BASE_URL}/${endpoint}`, {\r\n        params: { _token, ...params },\r\n      });\r\n    } else if (verb === \"post\") {\r\n      q = axios.post(`${BASE_URL}/${endpoint}`, { _token, ...params });\r\n    } else if (verb === \"patch\") {\r\n      q = axios.patch(`${BASE_URL}/${endpoint}`, { _token, ...params });\r\n    } else if (verb === \"delete\") {\r\n      q = axios.delete(`${BASE_URL}/${endpoint}`, { _token, ...params });\r\n    }\r\n    try {\r\n      return (await q).data;\r\n    } catch (err) {\r\n      console.error(\"API Error:\", err.response);\r\n      let message = err.response.data.message;\r\n      throw Array.isArray(message) ? message : [message];\r\n    }\r\n  }\r\n\r\n  // exchange endpoints\r\n  static async getExchanges() {\r\n    let res = await this.request(\"exchanges\");\r\n    return res.exchanges;\r\n  }\r\n\r\n  static async getExchangeAssets(exchange) {\r\n    let res = await this.request(`exchanges/${exchange}/assets`);\r\n    return res.assets;\r\n  }\r\n\r\n  static async getExchangeTickers(exchange) {\r\n    let res = await this.request(`exchanges/${exchange}/tickers`);\r\n    return res.tickers;\r\n  }\r\n\r\n  // auth endpoints\r\n  static async login(data) {\r\n    let res = await this.request(`login`, data, \"post\");\r\n    return res;\r\n  }\r\n\r\n  // user endpoints\r\n  static async register(data) {\r\n    let res = await this.request(`users`, data, \"post\");\r\n    return res;\r\n  }\r\n\r\n  static async getUser(username) {\r\n    let res = await this.request(`users/${username}`);\r\n    return res.user;\r\n  }\r\n\r\n  static async getUsers() {\r\n    let res = await this.request(`users`);\r\n    return res.users;\r\n  }\r\n\r\n  // userAccount endpoints\r\n  static async getAccounts(username) {\r\n    let res = await this.request(`userAccounts/${username}`);\r\n    return res.accounts;\r\n  }\r\n\r\n  static async getAccount(username, accountId) {\r\n    let res = await this.request(`userAccounts/${username}/${accountId}`);\r\n    return res.account;\r\n  }\r\n\r\n  static async createAccount(username, data) {\r\n    let res = await this.request(`userAccounts/${username}`, data, \"post\");\r\n    return res.accountId;\r\n  }\r\n\r\n  static async deleteAccount(username, accountId) {\r\n    let res = await this.request(\r\n      `userAccounts/${username}/${accountId}/delete`,\r\n      {},\r\n      \"post\"\r\n    );\r\n    return res.message;\r\n  }\r\n\r\n  // gets the balance of each asset in the user's account\r\n  // params consist of an optional date\r\n  static async getAccountBalances(username, accountId, date = null) {\r\n    let res = await this.request(\r\n      `userAccounts/${username}/${accountId}/balances`,\r\n      date\r\n    );\r\n    return res.balances;\r\n  }\r\n\r\n  // params consist of optional date timeframe (d, w, m, y, all)\r\n  static async getAccountBalanceHistory(username, accountId, timeframe) {\r\n    let res = await this.request(\r\n      `userAccounts/${username}/${accountId}/balanceHistory/?timeframe=${timeframe}`\r\n    );\r\n    return res.balanceHistory;\r\n  }\r\n\r\n  // backtest endpoints\r\n  // pass in the exchange name you want to see the assets for as a parameter\r\n  static async getBacktestAssets(data) {\r\n    let res = await this.request(\"exchanges\", data);\r\n    return res.assets;\r\n  }\r\n\r\n  // user trades endpoint\r\n  // pass in the exchange name you want to see the active trades for as a parameter\r\n  static async getTrades(username, account, userId, accountId) {\r\n    let res = await this.request(`${username}/${account}/trades`, {\r\n      userId,\r\n      accountId,\r\n    });\r\n    return res.assets;\r\n  }\r\n\r\n  static async updatePermissions(username, data) {\r\n    let res = await this.request(`users/${username}/permissions`, data, \"post\");\r\n    return res.permissions;\r\n  }\r\n\r\n  static async getPermissions(username) {\r\n    let res = await this.request(`users/${username}/permissions`);\r\n    return res.permissions;\r\n  }\r\n\r\n  static async createTrade(username, accountId, data) {\r\n    let res = await this.request(\r\n      `userTrades/${username}/${accountId}/trades`,\r\n      data,\r\n      \"post\"\r\n    );\r\n    return res.trade;\r\n  }\r\n\r\n  // rebalance endpoints\r\n  static async getRebalancePeriod(username, accountId) {\r\n    let res = await this.request(\r\n      `userAccounts/${username}/${accountId}/rebalancePeriod`\r\n    );\r\n    return res.rebalancePeriod;\r\n  }\r\n\r\n  static async setRebalancePeriod(username, accountId, data) {\r\n    let res = await this.request(\r\n      `userAccounts/${username}/${accountId}/rebalancePeriod`,\r\n      data,\r\n      \"post\"\r\n    );\r\n    return res.rebalancePeriod;\r\n  }\r\n\r\n  static async rebalance(username, accountId) {\r\n    let res = await this.request(\r\n      `userAccounts/${username}/${accountId}/rebalance`,\r\n      {},\r\n      \"post\"\r\n    );\r\n    return res.message;\r\n  }\r\n\r\n  static async getRebalanceStrategy(username, accountId) {\r\n    let res = await this.request(\r\n      `userAccounts/${username}/${accountId}/rebalanceStrategy`\r\n    );\r\n    return res.rebalanceStrategy;\r\n  }\r\n\r\n  static async setRebalanceStrategy(username, accountId, allocations) {\r\n    let res = await this.request(\r\n      `userAccounts/${username}/${accountId}/rebalanceStrategy`,\r\n      { rebalanceStrategy: { isDynamic: false, allocations } },\r\n      \"post\"\r\n    );\r\n    return res.rebalanceStrategy;\r\n  }\r\n\r\n  static async clearRebalanceStrategy(username, accountId) {\r\n    let res = await this.request(\r\n      `userAccounts/${username}/${accountId}/clearRebalanceStrategy`,\r\n      {},\r\n      \"post\"\r\n    );\r\n    return res.rebalanceStrategy;\r\n  }\r\n}\r\n\r\nexport default BackendAPI;\r\n","import { FETCH_EXCHANGE_ASSETS } from \"./types\";\r\nimport BackendAPI from \"../components/BackendAPI\";\r\nimport { startLoad, stopLoad } from \"./general\";\r\n\r\nexport function getExchangeAssetsFromAPI(exchange) {\r\n  return async function (dispatch) {\r\n    dispatch(startLoad());\r\n    try {\r\n      const response = await BackendAPI.getExchangeAssets(exchange);\r\n      dispatch(fetchExchangeAssets(response));\r\n      return dispatch(stopLoad());\r\n    } catch (error) {\r\n      dispatch(stopLoad());\r\n    }\r\n  };\r\n}\r\n\r\nfunction fetchExchangeAssets(assets) {\r\n  return {\r\n    type: FETCH_EXCHANGE_ASSETS,\r\n    assets,\r\n  };\r\n}\r\n","import {\r\n  UPDATE_CURRENT_USER,\r\n  LOGOUT_CURRENT_USER,\r\n  AUTH_SUCCESS,\r\n  UPDATE_CURRENT_ACCOUNT,\r\n  FETCH_ACCOUNTS,\r\n  ACCOUNT_CREATED_SUCCESS,\r\n  FETCH_BALANCES,\r\n  FETCH_PERMISSIONS,\r\n  PERMISSIONS_UPDATED,\r\n  START_CREATE_ACCOUNT,\r\n  END_CREATE_ACCOUNT,\r\n  ACCOUNT_DELETED,\r\n  USER_DATA_UPDATED,\r\n  RESET_USER_ACCOUNT_INFO,\r\n  FETCH_BALANCE_HISTORY,\r\n  FETCH_REBALANCE_PERIOD,\r\n  REBALANCE_PERIOD_UPDATED,\r\n  REBALANCE_INITIATED,\r\n  FETCH_REBALANCE_STRATEGY,\r\n  REBALANCE_STRATEGY_UPDATED,\r\n  CLEAR_REBALANCE_STRATEGY,\r\n} from \"./types\";\r\nimport { showErrors, resetErrors, startLoad, stopLoad } from \"./general\";\r\nimport BackendAPI from \"../components/BackendAPI\";\r\nimport { getExchangeAssetsFromAPI } from \"./assets\";\r\n\r\nexport function registerUserWithAPI(data) {\r\n  return async function (dispatch) {\r\n    dispatch(startLoad());\r\n\r\n    try {\r\n      const { user } = await BackendAPI.register(data);\r\n      const newUser = await BackendAPI.getUser(user.username);\r\n      dispatch(updateCurrentUserInStore(newUser));\r\n      dispatch(authSuccess());\r\n      return dispatch(stopLoad());\r\n    } catch (err) {\r\n      dispatch(showErrors(err));\r\n      dispatch(stopLoad());\r\n    }\r\n  };\r\n}\r\n\r\nexport function loginUserWithAPI(data) {\r\n  return async function (dispatch) {\r\n    dispatch(startLoad());\r\n\r\n    try {\r\n      const { user } = await BackendAPI.login(data);\r\n\r\n      // update the user in state\r\n      const loggedUser = await BackendAPI.getUser(user.username);\r\n\r\n      // update all relevant user data\r\n      dispatch(syncUserData(loggedUser.username));\r\n\r\n      dispatch(authSuccess());\r\n      return dispatch(stopLoad());\r\n    } catch (err) {\r\n      dispatch(showErrors(err));\r\n      dispatch(stopLoad());\r\n    }\r\n  };\r\n}\r\n\r\nfunction authSuccess() {\r\n  return {\r\n    type: AUTH_SUCCESS,\r\n  };\r\n}\r\n\r\nexport function updateCurrentUserInStore(user) {\r\n  return async function (dispatch) {\r\n    return dispatch(updateCurrentUser(user));\r\n  };\r\n}\r\n\r\nfunction updateCurrentUser(user) {\r\n  return {\r\n    type: UPDATE_CURRENT_USER,\r\n    user,\r\n  };\r\n}\r\n\r\nexport function logoutUserInState() {\r\n  return async function (dispatch) {\r\n    dispatch(resetErrors());\r\n    return dispatch(logoutUser());\r\n  };\r\n}\r\n\r\nfunction logoutUser(user) {\r\n  return {\r\n    type: LOGOUT_CURRENT_USER,\r\n  };\r\n}\r\n\r\nexport function getAccountsFromAPI(username) {\r\n  return async function (dispatch) {\r\n    try {\r\n      dispatch(startLoad());\r\n      const response = await BackendAPI.getAccounts(username);\r\n      dispatch(fetchAccounts(response));\r\n      return dispatch(stopLoad());\r\n    } catch (error) {\r\n      dispatch(showErrors());\r\n      return dispatch(stopLoad());\r\n    }\r\n  };\r\n}\r\n\r\nfunction fetchAccounts(accounts) {\r\n  return {\r\n    type: FETCH_ACCOUNTS,\r\n    accounts,\r\n  };\r\n}\r\n\r\nexport function createAccountInAPI(username, data) {\r\n  return async function (dispatch) {\r\n    dispatch(creatingAccount());\r\n    try {\r\n      const accountId = await BackendAPI.createAccount(username, data);\r\n      const newAccount = await BackendAPI.getAccount(accountId);\r\n      syncUserData(username, accountId);\r\n      dispatch(createAccountSuccessInState(newAccount.exchange));\r\n\r\n      return dispatch(stopCreatingAccount());\r\n    } catch (err) {\r\n      dispatch(stopCreatingAccount());\r\n      dispatch(showErrors(err));\r\n    }\r\n  };\r\n}\r\n\r\nfunction creatingAccount() {\r\n  return {\r\n    type: START_CREATE_ACCOUNT,\r\n  };\r\n}\r\n\r\nexport function deleteAccountInAPI(username, accountId) {\r\n  return async function (dispatch) {\r\n    try {\r\n      await BackendAPI.deleteAccount(username, accountId);\r\n      dispatch(accountDeleted(accountId));\r\n      return dispatch(syncUserData(username));\r\n    } catch (err) {\r\n      dispatch(showErrors(err));\r\n    }\r\n  };\r\n}\r\n\r\nfunction accountDeleted(accountId) {\r\n  return {\r\n    type: ACCOUNT_DELETED,\r\n    accountId,\r\n  };\r\n}\r\n\r\nfunction stopCreatingAccount() {\r\n  return {\r\n    type: END_CREATE_ACCOUNT,\r\n  };\r\n}\r\n\r\nexport function createAccountSuccessInState(accountName) {\r\n  return async function (dispatch) {\r\n    dispatch(createAccountSuccess(accountName));\r\n  };\r\n}\r\n\r\nfunction createAccountSuccess(accountName) {\r\n  return {\r\n    type: ACCOUNT_CREATED_SUCCESS,\r\n    accountName,\r\n  };\r\n}\r\n\r\nexport function getAccountBalancesFromAPI(username, accountName, date = null) {\r\n  return async function (dispatch) {\r\n    dispatch(startLoad());\r\n    try {\r\n      const response = await BackendAPI.getAccountBalances(\r\n        username,\r\n        accountName,\r\n        date\r\n      );\r\n      dispatch(fetchBalances(response));\r\n      return dispatch(stopLoad());\r\n    } catch (error) {\r\n      dispatch(showErrors());\r\n      return dispatch(stopLoad());\r\n    }\r\n  };\r\n}\r\n\r\nfunction fetchBalances(balances) {\r\n  return {\r\n    type: FETCH_BALANCES,\r\n    balances,\r\n  };\r\n}\r\n\r\nexport function getBalanceHistoryFromAPI(username, accountId, timeframe) {\r\n  return async function (dispatch) {\r\n    const res = await BackendAPI.getAccountBalanceHistory(\r\n      username,\r\n      accountId,\r\n      timeframe\r\n    );\r\n\r\n    dispatch(fetchBalanceHistory(res));\r\n  };\r\n}\r\n\r\nfunction fetchBalanceHistory(balanceHistory) {\r\n  return {\r\n    type: FETCH_BALANCE_HISTORY,\r\n    balanceHistory,\r\n  };\r\n}\r\n\r\n// gets all relevant user's account data at this moment for the current user and current account\r\nexport function syncUserData(username, accountId = null) {\r\n  return async function (dispatch) {\r\n    dispatch(startLoad());\r\n    dispatch(resetErrors());\r\n    try {\r\n      // sync user\r\n      const user = await BackendAPI.getUser(username);\r\n      dispatch(updateCurrentUserInStore(user));\r\n\r\n      // sync accounts\r\n      const accounts = await BackendAPI.getAccounts(user.username);\r\n      // return if there are no accounts\r\n      if (accounts.length === 0) {\r\n        dispatch(resetUserAccountInfo(user.username));\r\n        dispatch(stopLoad());\r\n        return;\r\n      }\r\n\r\n      dispatch(fetchAccounts(accounts));\r\n\r\n      // update current account\r\n      const accountIdToUse = accountId ? accountId : accounts[0].id;\r\n      const currAccount = await BackendAPI.getAccount(\r\n        user.username,\r\n        accountIdToUse\r\n      );\r\n      dispatch(updateCurrentAccount(currAccount));\r\n\r\n      // update account balances\r\n      const balances = await BackendAPI.getAccountBalances(\r\n        user.username,\r\n        accountIdToUse\r\n      );\r\n      dispatch(fetchBalances(balances));\r\n\r\n      // update permission info\r\n      dispatch(getPermissionsFromAPI(user.username));\r\n\r\n      // update asset info\r\n      dispatch(getExchangeAssetsFromAPI(currAccount.exchange));\r\n\r\n      dispatch(userDataUpdated());\r\n      return dispatch(stopLoad());\r\n    } catch (error) {\r\n      dispatch(showErrors());\r\n      return dispatch(stopLoad());\r\n    }\r\n  };\r\n}\r\n\r\nfunction resetUserAccountInfo() {\r\n  return {\r\n    type: RESET_USER_ACCOUNT_INFO,\r\n  };\r\n}\r\n\r\nfunction userDataUpdated() {\r\n  return {\r\n    type: USER_DATA_UPDATED,\r\n  };\r\n}\r\n\r\nexport function getPermissionsFromAPI(username) {\r\n  return async function (dispatch) {\r\n    dispatch(startLoad());\r\n    try {\r\n      const response = await BackendAPI.getPermissions(username);\r\n      dispatch(fetchPermissions(response));\r\n      return dispatch(stopLoad());\r\n    } catch (error) {\r\n      dispatch(stopLoad());\r\n      dispatch(showErrors(error));\r\n    }\r\n\r\n    return dispatch(stopLoad());\r\n  };\r\n}\r\n\r\nfunction fetchPermissions(permissions) {\r\n  return {\r\n    type: FETCH_PERMISSIONS,\r\n    permissions,\r\n  };\r\n}\r\n\r\nexport function updatePermissionsInAPI(username, data) {\r\n  return async function (dispatch) {\r\n    const response = await BackendAPI.updatePermissions(username, data);\r\n    return dispatch(updatePermissions(response));\r\n  };\r\n}\r\n\r\nfunction updatePermissions(permissions) {\r\n  return {\r\n    type: PERMISSIONS_UPDATED,\r\n    permissions,\r\n  };\r\n}\r\n\r\nexport function updateCurrentAccountInState(account) {\r\n  return async function (dispatch) {\r\n    return dispatch(updateCurrentAccount(account));\r\n  };\r\n}\r\n\r\nfunction updateCurrentAccount(account) {\r\n  return {\r\n    type: UPDATE_CURRENT_ACCOUNT,\r\n    account,\r\n  };\r\n}\r\n\r\n/** Rebalance Actions */\r\nexport function getRebalancePeriodFromAPI(username, accountId) {\r\n  return async function (dispatch) {\r\n    const res = await BackendAPI.getRebalancePeriod(username, accountId);\r\n    dispatch(fetchRebalancePeriod(res));\r\n  };\r\n}\r\n\r\nfunction fetchRebalancePeriod(rebalancePeriod) {\r\n  return {\r\n    type: FETCH_REBALANCE_PERIOD,\r\n    rebalancePeriod,\r\n  };\r\n}\r\n\r\nexport function setRebalancePeriodInAPI(username, accountId, rebalancePeriod) {\r\n  return async function (dispatch) {\r\n    dispatch(startLoad());\r\n    try {\r\n      const res = await BackendAPI.setRebalancePeriod(\r\n        username,\r\n        accountId,\r\n        rebalancePeriod\r\n      );\r\n      dispatch(updatedRebalancePeriod(res));\r\n      return dispatch(stopLoad());\r\n    } catch (error) {\r\n      dispatch(stopLoad());\r\n    }\r\n  };\r\n}\r\n\r\nfunction updatedRebalancePeriod(rebalancePeriod) {\r\n  return {\r\n    type: REBALANCE_PERIOD_UPDATED,\r\n    rebalancePeriod,\r\n  };\r\n}\r\n\r\nexport function rebalanceInAPI(username, accountId) {\r\n  return async function (dispatch) {\r\n    const res = await BackendAPI.rebalance(username, accountId);\r\n    dispatch(initiateRebalance(res));\r\n  };\r\n}\r\n\r\nfunction initiateRebalance(message) {\r\n  return {\r\n    type: REBALANCE_INITIATED,\r\n    message,\r\n  };\r\n}\r\n\r\nexport function getRebalanceStrategyFromAPI(username, accountId) {\r\n  return async function (dispatch) {\r\n    const res = await BackendAPI.getRebalanceStrategy(username, accountId);\r\n    dispatch(fetchRebalanceStrategy(res));\r\n  };\r\n}\r\n\r\nfunction fetchRebalanceStrategy(rebalanceStrategy) {\r\n  return {\r\n    type: FETCH_REBALANCE_STRATEGY,\r\n    rebalanceStrategy,\r\n  };\r\n}\r\n\r\nexport function setRebalanceStrategyInAPI(username, accountId, allocations) {\r\n  return async function (dispatch) {\r\n    dispatch(startLoad());\r\n\r\n    try {\r\n      const res = await BackendAPI.setRebalanceStrategy(\r\n        username,\r\n        accountId,\r\n        allocations\r\n      );\r\n      dispatch(setRebalanceStrategy(res));\r\n      return dispatch(stopLoad());\r\n    } catch (error) {\r\n      dispatch(stopLoad());\r\n    }\r\n  };\r\n}\r\n\r\nfunction setRebalanceStrategy(rebalanceStrategy) {\r\n  return {\r\n    type: REBALANCE_STRATEGY_UPDATED,\r\n    rebalanceStrategy,\r\n  };\r\n}\r\n\r\nexport function clearRebalanceStrategyInAPI(username, accountId) {\r\n  return async function (dispatch) {\r\n    const res = await BackendAPI.clearRebalanceStrategy(username, accountId);\r\n    dispatch(clearRebalanceStrategy(res));\r\n  };\r\n}\r\n\r\nfunction clearRebalanceStrategy(rebalanceStrategy) {\r\n  return {\r\n    type: CLEAR_REBALANCE_STRATEGY,\r\n    rebalanceStrategy,\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { NavDropdown, Image } from \"react-bootstrap\";\r\nimport { updateCurrentAccountInState } from \"../actions/currentUser\";\r\n\r\nconst ExchangeDropDown = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { accounts, currentAccount, notCurrentAccounts } = useSelector(\r\n    (st) => st.currentUser\r\n  );\r\n\r\n  const updateCurrentAccount = (e) => {\r\n    const accountName = e.target.value;\r\n    dispatch(updateCurrentAccountInState(accountName));\r\n  };\r\n\r\n  const accountsWithoutCurrentRender = notCurrentAccounts.length\r\n    ? notCurrentAccounts.map((a) => (\r\n        <NavDropdown.Item\r\n          key={a.id}\r\n          onClick={updateCurrentAccount}\r\n          title={a.exchange}\r\n          className=\"text-center\"\r\n          value={a.exchange}\r\n        >\r\n          <Image className=\"mx-2\" src={a.icon} alt={a.exchange} />\r\n          {a.exchange}\r\n        </NavDropdown.Item>\r\n      ))\r\n    : null;\r\n\r\n  const render =\r\n    currentAccount && accounts.length ? (\r\n      <NavDropdown title={currentAccount.exchange} id=\"collasible-nav-dropdown\">\r\n        {accountsWithoutCurrentRender}\r\n        <NavDropdown.Item as={Link} to=\"/exchanges\" className=\"text-center\">\r\n          + Add Account\r\n        </NavDropdown.Item>\r\n      </NavDropdown>\r\n    ) : (\r\n      <NavDropdown title=\"Add Exchange\" id=\"collasible-nav-dropdown\">\r\n        <NavDropdown.Item as={Link} to=\"/exchanges\" className=\"text-center\">\r\n          + Add Account\r\n        </NavDropdown.Item>\r\n      </NavDropdown>\r\n    );\r\n\r\n  return render;\r\n};\r\n\r\nexport default ExchangeDropDown;\r\n","import React from \"react\";\r\nimport { Spinner as Loading } from \"react-bootstrap\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"Spinner\">\r\n      <Loading className=\"loading-icon\" animation=\"grow\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport \"./PrimaryButton.scss\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nconst PrimaryButton = ({\r\n  className,\r\n  submitFunc,\r\n  textDisabled,\r\n  textPrimary,\r\n  loadingText,\r\n  disabled,\r\n  loading,\r\n}) => {\r\n  return (\r\n    <button\r\n      className={`PrimaryButton ${className ? className : \"\"} ${\r\n        disabled ? \" disabled\" : \"\"\r\n      }`}\r\n      type=\"submit\"\r\n      onClick={submitFunc}\r\n      disabled={disabled && disabled}\r\n    >\r\n      {loading && (\r\n        <Spinner\r\n          as=\"span\"\r\n          className=\"mx-2\"\r\n          variant=\"light\"\r\n          animation=\"border\"\r\n          size=\"sm\"\r\n        />\r\n      )}\r\n      {!loading ? (\r\n        <span>{disabled ? textDisabled : textPrimary}</span>\r\n      ) : (\r\n        loadingText\r\n      )}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default PrimaryButton;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { NavDropdown } from \"react-bootstrap\";\r\nimport {\r\n  updatePermissionsInAPI,\r\n  deleteAccountInAPI,\r\n  getPermissionsFromAPI,\r\n} from \"../actions/currentUser\";\r\nimport Spinner from \"./Spinner\";\r\nimport \"./SettingsDropDown.scss\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCog } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Switch from \"react-switch\";\r\nimport PrimaryButton from \"./PrimaryButton\";\r\n\r\nconst SettingsDropDown = () => {\r\n  const history = useHistory();\r\n  const [loadingTradePermish, setLoadingTradePermish] = useState(false);\r\n  const [loadingAccountPermish, setLoadingAccountPermish] = useState(false);\r\n  const [deletingAccount, setDeletingAccount] = useState(false);\r\n\r\n  const { user, permissions, currentAccount } = useSelector(\r\n    (st) => st.currentUser\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  const handleAccountSettingChange = (checked) => {\r\n    setLoadingAccountPermish(true);\r\n\r\n    const data = { account: checked, trade: permissions.trade };\r\n    dispatch(updatePermissionsInAPI(user.username, data));\r\n\r\n    setLoadingAccountPermish(false);\r\n  };\r\n\r\n  const handleTradeSettingChange = (checked) => {\r\n    setLoadingTradePermish(true);\r\n\r\n    const data = { trade: checked, account: permissions.account };\r\n    dispatch(updatePermissionsInAPI(user.username, data));\r\n\r\n    setLoadingTradePermish(false);\r\n  };\r\n\r\n  const handleDeleteAccount = (e) => {\r\n    setDeletingAccount(true);\r\n    dispatch(deleteAccountInAPI(user.username, currentAccount.id));\r\n    history.push(\"/dashboard\");\r\n    setDeletingAccount(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function getPermissions() {\r\n      dispatch(getPermissionsFromAPI(user.username));\r\n    }\r\n\r\n    getPermissions();\r\n  }, []);\r\n\r\n  if (!permissions) return null;\r\n\r\n  return (\r\n    <NavDropdown\r\n      title={<FontAwesomeIcon icon={faCog} />}\r\n      id=\"settings-dropdown\"\r\n      className=\"SettingsDropDown\"\r\n    >\r\n      <NavDropdown.Item className=\"settings-dropdown-item\">\r\n        <div onClick={(e) => e.stopPropagation()}>\r\n          {loadingAccountPermish ? (\r\n            <Spinner />\r\n          ) : (\r\n            <label>\r\n              <span className=\"setting-span\">Account View Enabled</span>\r\n              <Switch\r\n                className=\"react-switch\"\r\n                onColor=\"#00d897\"\r\n                onChange={handleAccountSettingChange}\r\n                checked={permissions.account}\r\n                height={25}\r\n                width={45}\r\n                handleDiameter={18}\r\n              />\r\n            </label>\r\n          )}\r\n        </div>\r\n      </NavDropdown.Item>\r\n      <NavDropdown.Item className=\"settings-dropdown-item\">\r\n        <div onClick={(e) => e.stopPropagation()}>\r\n          {loadingTradePermish ? (\r\n            <Spinner />\r\n          ) : (\r\n            <label>\r\n              <span className=\"setting-span\">Trading Enabled</span>\r\n              <Switch\r\n                className=\"react-switch\"\r\n                onColor=\"#00d897\"\r\n                onChange={handleTradeSettingChange}\r\n                checked={permissions.trade}\r\n                height={25}\r\n                width={45}\r\n                handleDiameter={18}\r\n              />\r\n            </label>\r\n          )}\r\n        </div>\r\n      </NavDropdown.Item>\r\n      <NavDropdown.Item className=\"settings-dropdown-item\">\r\n        <div\r\n          className=\"delete-button-wrapper\"\r\n          onClick={(e) => e.stopPropagation()}\r\n        >\r\n          <label>\r\n            <span className=\"setting-span\">Delete Exchange Connection</span>\r\n            {\r\n              <PrimaryButton\r\n                className=\"delete-button\"\r\n                submitFunc={handleDeleteAccount}\r\n                textPrimary=\"Delete\"\r\n                loadingText=\"Deleting...\"\r\n                loading={deletingAccount}\r\n              />\r\n            }\r\n          </label>\r\n        </div>\r\n      </NavDropdown.Item>\r\n    </NavDropdown>\r\n  );\r\n};\r\nexport default SettingsDropDown;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Navbar, Nav } from \"react-bootstrap/\";\r\nimport ExchangeDropDown from \"./ExchangeDropDown\";\r\nimport SettingsDropDown from \"./SettingsDropDown\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faLayerGroup,\r\n  faExchangeAlt,\r\n  faDatabase,\r\n  faBolt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./Navigation.scss\";\r\n\r\nconst Navigation = ({ logout }) => {\r\n  const { user } = useSelector((state) => state.currentUser);\r\n\r\n  const loggedInRender = (\r\n    <>\r\n      <Nav className=\"mr-auto\">\r\n        <Nav.Link as={Link} to=\"/dashboard\">\r\n          <span>\r\n            <FontAwesomeIcon className=\"mr-1\" icon={faLayerGroup} />\r\n          </span>\r\n          Dashboard\r\n        </Nav.Link>\r\n        <Nav.Link as={Link} to=\"/automate\">\r\n          <span>\r\n            <FontAwesomeIcon className=\"mr-1\" icon={faBolt} />\r\n          </span>\r\n          Automate\r\n        </Nav.Link>\r\n        <Nav.Link as={Link} to=\"/trade\">\r\n          <span>\r\n            <FontAwesomeIcon className=\"mr-1\" icon={faExchangeAlt} />\r\n          </span>\r\n          Trade\r\n        </Nav.Link>\r\n        <Nav.Link as={Link} to=\"/backtest\">\r\n          <span>\r\n            <FontAwesomeIcon className=\"mr-1\" icon={faDatabase} />\r\n          </span>\r\n          Backtest\r\n        </Nav.Link>\r\n      </Nav>\r\n\r\n      <Nav className=\"navbar right-side\">\r\n        <ExchangeDropDown />\r\n\r\n        <SettingsDropDown />\r\n\r\n        <Nav.Link as={Link} to=\"/logout\" onClick={logout}>\r\n          Logout\r\n        </Nav.Link>\r\n      </Nav>\r\n    </>\r\n  );\r\n\r\n  const loggedOutRender = (\r\n    <Nav className=\"ml-auto\">\r\n      <Nav.Link as={Link} to=\"/login\">\r\n        Login\r\n      </Nav.Link>\r\n    </Nav>\r\n  );\r\n\r\n  return (\r\n    <div className=\"Navigation\">\r\n      <Navbar>\r\n        <Navbar.Brand as={Link} to=\"/\">\r\n          Balanzer\r\n        </Navbar.Brand>\r\n        {user ? loggedInRender : loggedOutRender}\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./Home.scss\";\r\n\r\nfunction Home() {\r\n  const { user } = useSelector((st) => st.currentUser);\r\n\r\n  return (\r\n    <div className=\"Home\">\r\n      <div className=\"container text-center justify-content-center\">\r\n        <p className=\"lead\">Cryptocurrency Investing Made Easy</p>\r\n        {user ? null : (\r\n          <Button as={Link} className=\"login-button\" to=\"/login\">\r\n            Log in\r\n          </Button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction PrivateRoute({ exact, path, children }) {\r\n  const { user } = useSelector((st) => st.currentUser);\r\n\r\n  if (!user) {\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n\r\n  return (\r\n    <Route exact={exact} path={path}>\r\n      {children}\r\n    </Route>\r\n  );\r\n}\r\n\r\nexport default PrivateRoute;\r\n","import React from \"react\";\r\n\r\nfunction Alert({ type, messages }) {\r\n  return (\r\n    <div className={`alert alert-${type}`} role=\"alert\">\r\n      {messages.map((error) => (\r\n        <p className=\"mb-0 small\" key={error}>\r\n          {error}\r\n        </p>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nAlert.defaultProps = {\r\n  type: \"danger\",\r\n  messages: [],\r\n};\r\n\r\nexport default Alert;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./Login.scss\";\r\nimport Alert from \"./Alert\";\r\nimport PrimaryButton from \"./PrimaryButton\";\r\nimport { registerUserWithAPI, loginUserWithAPI } from \"../actions/currentUser\";\r\nimport BackendApi from \"./BackendAPI\";\r\n\r\nfunction Login({ setToken }) {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [activeView, setActiveView] = useState(\"login\");\r\n  const [loginInfo, setLoginInfo] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n    email: \"\",\r\n    formErrors: [],\r\n  });\r\n\r\n  function setLoginView() {\r\n    setActiveView(\"login\");\r\n  }\r\n\r\n  function setSignupView() {\r\n    setActiveView(\"signup\");\r\n  }\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    let data;\r\n    let endpoint;\r\n\r\n    if (activeView === \"signup\") {\r\n      data = {\r\n        username: loginInfo.username,\r\n        password: loginInfo.password,\r\n        email: loginInfo.email,\r\n      };\r\n      endpoint = \"register\";\r\n    } else {\r\n      data = {\r\n        username: loginInfo.username,\r\n        password: loginInfo.password,\r\n      };\r\n      endpoint = \"login\";\r\n    }\r\n\r\n    let res;\r\n    setIsLoading(true);\r\n    try {\r\n      if (endpoint === \"login\") {\r\n        res = await BackendApi.login(data);\r\n        dispatch(loginUserWithAPI(data));\r\n      } else {\r\n        res = await BackendApi.register(data);\r\n        dispatch(registerUserWithAPI(data));\r\n      }\r\n\r\n      setToken(res.token);\r\n      setIsLoading(false);\r\n      history.push(\"/dashboard\");\r\n    } catch (errors) {\r\n      setIsLoading(false);\r\n      return setLoginInfo((l) => ({ ...l, formErrors: errors }));\r\n    }\r\n  }\r\n\r\n  function handleChange(e) {\r\n    const { name, value } = e.target;\r\n    setLoginInfo((l) => ({ ...l, [name]: value }));\r\n  }\r\n\r\n  let loginActive = activeView === \"login\";\r\n\r\n  const signupFields = (\r\n    <div>\r\n      <div className=\"form-group\">\r\n        <label>Email</label>\r\n        <input\r\n          type=\"email\"\r\n          name=\"email\"\r\n          className=\"form-control\"\r\n          value={loginInfo.email}\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"Login\">\r\n      <div className=\"login-signup-buttons\">\r\n        <div className=\"btn-group\">\r\n          <button\r\n            className={`btn btn-login ${loginActive ? \"active\" : \"\"} `}\r\n            onClick={setLoginView}\r\n          >\r\n            Login\r\n          </button>\r\n          <button\r\n            className={`btn btn-signup ${loginActive ? \"\" : \"active\"} `}\r\n            onClick={setSignupView}\r\n          >\r\n            Sign up\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n              <label>Username</label>\r\n              <input\r\n                name=\"username\"\r\n                className=\"form-control\"\r\n                value={loginInfo.username}\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Password</label>\r\n              <input\r\n                type=\"password\"\r\n                name=\"password\"\r\n                className=\"form-control\"\r\n                value={loginInfo.password}\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n            {loginActive ? \"\" : signupFields}\r\n            {loginInfo.formErrors.length ? (\r\n              <Alert type=\"danger\" messages={loginInfo.formErrors} />\r\n            ) : null}\r\n\r\n            <PrimaryButton\r\n              submitFunc={handleSubmit}\r\n              textDisabled={loginActive ? \"Log in\" : \"Sign Up\"}\r\n              textPrimary={loginActive ? \"Log in\" : \"Sign Up\"}\r\n              loadingText={loginActive ? \"Logging in\" : \"Signing Up\"}\r\n              disabled={false}\r\n              loading={isLoading}\r\n            />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import { FETCH_EXCHANGES } from \"./types\";\r\nimport BackendAPI from \"../components/BackendAPI\";\r\nimport { startLoad, stopLoad } from \"./general\";\r\n\r\nexport function getExchangesFromAPI() {\r\n  return async function (dispatch) {\r\n    dispatch(startLoad());\r\n\r\n    try {\r\n      const response = await BackendAPI.getExchanges();\r\n      dispatch(fetchExchanges(response));\r\n      return dispatch(stopLoad());\r\n    } catch (error) {\r\n      dispatch(stopLoad());\r\n    }\r\n  };\r\n}\r\n\r\nfunction fetchExchanges(exchanges) {\r\n  return {\r\n    type: FETCH_EXCHANGES,\r\n    exchanges,\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport { Card, Image } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Exchange.scss\";\r\n\r\nconst Exchange = ({ name, icon }) => {\r\n  return (\r\n    <div className=\"Exchange\">\r\n      <Link to={`/exchanges/${name}`}>\r\n        <Card>\r\n          <Image\r\n            className=\"exchange-img\"\r\n            src={icon}\r\n            alt={name}\r\n            style={{ width: \"32px\", height: \"32px\" }}\r\n          />\r\n          <Card.Body>{name}</Card.Body>\r\n        </Card>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Exchange;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getExchangesFromAPI } from \"../actions/exchanges\";\r\nimport Exchange from \"./Exchange\";\r\nimport Spinner from \"./Spinner\";\r\nimport \"./Exchanges.scss\";\r\nimport { CardDeck } from \"react-bootstrap\";\r\n\r\nconst Exchanges = () => {\r\n  const dispatch = useDispatch();\r\n  const { loading } = useSelector((st) => st.general);\r\n  const exchanges = useSelector((st) => st.exchanges);\r\n\r\n  useEffect(() => {\r\n    async function getExchanges() {\r\n      dispatch(getExchangesFromAPI());\r\n    }\r\n    getExchanges();\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"Exchanges container text-center justify-content-center\">\r\n      {loading ? (\r\n        <Spinner />\r\n      ) : (\r\n        <CardDeck>\r\n          {exchanges.length\r\n            ? exchanges.map((e, i) => (\r\n                <Exchange key={i} name={e.exchange} icon={e.icon} />\r\n              ))\r\n            : null}\r\n        </CardDeck>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Exchanges;\r\n","export default [\"coinbasepro\", \"kucoin\"];\r\n","import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { createAccountInAPI } from \"../actions/currentUser\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport exchangesWithPassphrases from \"../helpers/exchangesWithPassphrase\";\r\nimport Alert from \"./Alert\";\r\nimport \"./ExchangeConnectionForm.scss\";\r\nimport PrimaryButton from \"./PrimaryButton\";\r\n\r\nconst ExchangeConnectionForm = ({ exchangeName }) => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const { user, creatingAccount } = useSelector((st) => st.currentUser);\r\n\r\n  // show the passphrase input if the exchange requires it\r\n  const hasPassphrase =\r\n    exchangesWithPassphrases.indexOf(exchangeName) !== -1 ? true : false;\r\n\r\n  const [formData, setFormData] = useState({\r\n    publicKey: \"\",\r\n    privateKey: \"\",\r\n    passphrase: \"\",\r\n    formErrors: [],\r\n  });\r\n  const [inValidForm, setInvalidForm] = useState(true);\r\n\r\n  const handleChange = (e) => {\r\n    setInvalidForm(false);\r\n    const { name, value } = e.target;\r\n    setFormData((fData) => ({ ...fData, [name]: value }));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const { publicKey, privateKey, passphrase } = formData;\r\n    const { username, shrimpy_user_id } = user;\r\n    const accountData = {\r\n      userId: shrimpy_user_id,\r\n      exchangeName,\r\n      publicKey,\r\n      privateKey,\r\n      passphrase,\r\n    };\r\n\r\n    // create exchange account connection using the api key user inputted data and the exchange name\r\n    try {\r\n      dispatch(createAccountInAPI(username, accountData));\r\n      history.push(\"/dashboard\");\r\n    } catch (errors) {\r\n      setFormData((fData) => ({\r\n        ...fData,\r\n        formErrors: [errors],\r\n      }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"ExchangeConnectionForm\">\r\n      <form autoComplete=\"off\">\r\n        <Form.Group>\r\n          <Form.Label>Public Api Key</Form.Label>\r\n          <Form.Control\r\n            onChange={handleChange}\r\n            type=\"text\"\r\n            placeholder=\"Enter public API key\"\r\n            value={formData.publicKey}\r\n            name=\"publicKey\"\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Private Api Key</Form.Label>\r\n          <Form.Control\r\n            onChange={handleChange}\r\n            type=\"password\"\r\n            placeholder=\"Enter private API key\"\r\n            value={formData.privateKey}\r\n            name=\"privateKey\"\r\n          />\r\n        </Form.Group>\r\n\r\n        {hasPassphrase && (\r\n          <Form.Group>\r\n            <Form.Label>Passphrase</Form.Label>\r\n            <Form.Control\r\n              onChange={handleChange}\r\n              type=\"password\"\r\n              placeholder=\"Enter passphrase\"\r\n              value={formData.passphrase}\r\n              name=\"passphrase\"\r\n            />\r\n            <Form.Text className=\"text-muted\">\r\n              <span>Sometimes known as API secret or secret passphrase</span>\r\n            </Form.Text>\r\n          </Form.Group>\r\n        )}\r\n        {formData.formErrors.length ? (\r\n          <Alert type=\"danger\" messages={formData.formErrors} />\r\n        ) : null}\r\n\r\n        <PrimaryButton\r\n          submitFunc={handleSubmit}\r\n          textDisabled={`Connect to ${exchangeName}`}\r\n          textPrimary={`Connect to ${exchangeName}`}\r\n          loadingText=\"Connecting...\"\r\n          disabled={inValidForm}\r\n          loading={creatingAccount}\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExchangeConnectionForm;\r\n","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport ExchangeConnectionForm from \"./ExchangeConnectionForm\";\r\n\r\nconst ExchangeConnection = () => {\r\n  const { exchangeName } = useParams();\r\n\r\n  return (\r\n    <div className=\"ExchangeConnection text-center justify-content-center\">\r\n      <ExchangeConnectionForm exchangeName={exchangeName} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExchangeConnection;\r\n","import React from \"react\";\r\nimport Spinner from \"./Spinner\";\r\nimport \"./Summary.scss\";\r\n\r\nconst Summary = ({ loading, title, subTitle }) => {\r\n  return (\r\n    <div className=\"Summary\">\r\n      <>\r\n        <div className=\"subtitle\">{subTitle}</div>\r\n        {loading ? <Spinner /> : <div className=\"title\">{title}</div>}\r\n      </>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Summary;\r\n","export const formatUSD = (val) => {\r\n  return `$${val.toFixed(2)}`;\r\n};\r\n\r\nexport const formatNative = (val) => {\r\n  return `${val.toFixed(5)}`;\r\n};\r\n","import React from \"react\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport \"./AssetImage.scss\";\r\n\r\nconst AssetImage = ({ symbol }) => {\r\n  const svgLink = `/crypto-logos/${symbol}.svg`;\r\n  const pngLink = `/crypto-logos/${symbol}.svg`;\r\n  const defaultImg = \"/crypto-logos/cc.svg\";\r\n\r\n  return (\r\n    <Image\r\n      className=\"mx-2\"\r\n      src={svgLink || pngLink}\r\n      alt={symbol}\r\n      onError={(e) => {\r\n        e.target.onerror = null;\r\n        e.target.src = defaultImg;\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AssetImage;\r\n","import React from \"react\";\r\nimport AssetImage from \"./AssetImage\";\r\nimport \"./TableItem.scss\";\r\n\r\nconst TableItem = ({ symbol, value }) => {\r\n  return (\r\n    <tr className=\"TableItem\">\r\n      <td>\r\n        <AssetImage symbol={symbol} />\r\n        <span>{symbol}</span>\r\n      </td>\r\n      <td>{value}</td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default TableItem;\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst Toggle = ({ handleToggle, initialValue, textPrimary, textSecondary }) => {\r\n  const render = initialValue ? textPrimary : textSecondary;\r\n  return (\r\n    <div className=\"Toggle\">\r\n      <Button className=\"Toggle button\" onClick={handleToggle}>\r\n        {render}\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Toggle;\r\n","import React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { formatUSD, formatNative } from \"../helpers/currencyHelpers\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport TableItem from \"./TableItem\";\r\nimport Toggle from \"./Toggle\";\r\nimport \"./BalancesTable.scss\";\r\n\r\nconst BalancesTable = () => {\r\n  const [usdValueSelected, toggleUsdValueSelected] = useState(true);\r\n  const { balances } = useSelector((st) => st.currentUser);\r\n\r\n  const tableRender =\r\n    balances &&\r\n    balances.map((bal) => (\r\n      <TableItem\r\n        key={bal.symbol}\r\n        symbol={bal.symbol}\r\n        value={\r\n          usdValueSelected\r\n            ? formatUSD(bal.usdValue)\r\n            : formatNative(bal.nativeValue)\r\n        }\r\n      />\r\n    ));\r\n\r\n  const handleToggleUSD = () => {\r\n    toggleUsdValueSelected(!usdValueSelected);\r\n  };\r\n\r\n  return (\r\n    <div className=\"BalancesTable\">\r\n      <Toggle\r\n        handleToggle={handleToggleUSD}\r\n        initialValue={usdValueSelected}\r\n        textPrimary={`Toggle Native`}\r\n        textSecondary={`Toggle USD`}\r\n      ></Toggle>\r\n      <Table>\r\n        <tbody>{tableRender}</tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BalancesTable;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getBalanceHistoryFromAPI } from \"../actions/currentUser\";\r\nimport { LineChart, Line, XAxis, Tooltip } from \"recharts\";\r\n\r\nimport \"./BalanceChart.scss\";\r\n\r\nconst BalanceChart = () => {\r\n  const timeframes = [\"D\", \"W\", \"M\", \"Y\", \"All\"];\r\n  const { balanceHistory, user, currentAccount } = useSelector(\r\n    (st) => st.currentUser\r\n  );\r\n  const [timeframe, setTimeframe] = useState(\"All\");\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = (e) => {\r\n    e.persist();\r\n    setTimeframe(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      getBalanceHistoryFromAPI(user.username, currentAccount.id, timeframe)\r\n    );\r\n  }, [dispatch, timeframe, currentAccount.id, user.username]);\r\n\r\n  const periodMenuRender = (\r\n    <div className=\"period-menu\">\r\n      <div>Portfolio Performance</div>\r\n      <div className=\"period-menu-switcher\">\r\n        {timeframes.map((t, i) => (\r\n          <button\r\n            key={i}\r\n            className={`timeframe-button ${timeframe === t ? \"active\" : \"\"}`}\r\n            onClick={handleChange}\r\n            value={t}\r\n          >\r\n            {t}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderChart = (\r\n    <LineChart\r\n      data={balanceHistory}\r\n      margin={{ right: 5, left: 5 }}\r\n      width={500}\r\n      height={250}\r\n    >\r\n      <XAxis dataKey=\"date\" />\r\n      <Tooltip />\r\n      <Line type=\"monotone\" dataKey=\"usdValue\" stroke=\"#00d897\" />\r\n    </LineChart>\r\n  );\r\n\r\n  return (\r\n    <div className=\"BalanceChart\">\r\n      {periodMenuRender}\r\n      {renderChart}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BalanceChart;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Summary from \"./Summary\";\r\nimport BalancesTable from \"./BalancesTable\";\r\nimport BalanceChart from \"./BalanceChart\";\r\nimport Spinner from \"./Spinner\";\r\nimport \"./Dashboard.scss\";\r\n\r\nconst Dashboard = () => {\r\n  const { currentAccount, totalBalanceUSD } = useSelector(\r\n    (st) => st.currentUser\r\n  );\r\n  const { loading } = useSelector((st) => st.general);\r\n\r\n  if (!currentAccount) {\r\n    return (\r\n      <div className=\"Dashboard container text-center\">\r\n        <h2>Please connect to an account</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"Dashboard container text-center\">\r\n      {loading ? (\r\n        <Spinner />\r\n      ) : (\r\n        <>\r\n          <Summary title={totalBalanceUSD} subTitle={\"Portfolio Balance\"} />\r\n          <div className=\"balances-table-wrapper\">\r\n            <BalancesTable />\r\n            <BalanceChart />\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","export const rebalancePeriodTimeframes = new Map([\r\n  [1, \"hour\"],\r\n  [1 * 24, \"day\"],\r\n  [7 * 24, \"week\"],\r\n  [14 * 24, \"two weeks\"],\r\n  [30 * 24, \"month\"],\r\n  [0, \"none\"],\r\n]);\r\n","import {\r\n  SHOW_REBALANCE_ASSET_SELECT_MODAL,\r\n  SHOW_REBALANCE_PERIOD_MODAL,\r\n  CLOSE_REBALANCE_ASSET_SELECT_MODAL,\r\n  CLOSE_REBALANCE_PERIOD_MODAL,\r\n} from \"./types\";\r\n\r\nexport function showRebalancePeriodModalInState() {\r\n  return async function (dispatch) {\r\n    return dispatch(showRebalPeriodModal());\r\n  };\r\n}\r\n\r\nfunction showRebalPeriodModal() {\r\n  return {\r\n    type: SHOW_REBALANCE_PERIOD_MODAL,\r\n  };\r\n}\r\n\r\nexport function showRebalanceAssetSelectModalInState() {\r\n  return async function (dispatch) {\r\n    return dispatch(showRebalAssetSelectModal());\r\n  };\r\n}\r\n\r\nfunction showRebalAssetSelectModal() {\r\n  return {\r\n    type: SHOW_REBALANCE_ASSET_SELECT_MODAL,\r\n  };\r\n}\r\n\r\nexport function closeRebalancePeriodModal() {\r\n  return async function (dispatch) {\r\n    return dispatch(closeRebalPeriodModal());\r\n  };\r\n}\r\n\r\nfunction closeRebalPeriodModal() {\r\n  return {\r\n    type: CLOSE_REBALANCE_PERIOD_MODAL,\r\n  };\r\n}\r\n\r\nexport function closeRebalanceAssetSelectModal() {\r\n  return async function (dispatch) {\r\n    return dispatch(closeRebalAssetSelectModal());\r\n  };\r\n}\r\n\r\nfunction closeRebalAssetSelectModal() {\r\n  return {\r\n    type: CLOSE_REBALANCE_ASSET_SELECT_MODAL,\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport { rebalancePeriodTimeframes } from \"../helpers/timeframes\";\r\nimport \"./RebalancePeriodSelectModal.scss\";\r\n\r\nconst RebalancePeriodSelectModal = ({\r\n  handleSubmit,\r\n  showModal,\r\n  closeModal,\r\n}) => {\r\n  return (\r\n    <Modal\r\n      scrollable={true}\r\n      className=\"RebalancePeriodSelectModal\"\r\n      show={showModal}\r\n      onHide={closeModal}\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Choose Rebalance Period</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        {[...rebalancePeriodTimeframes.values()].map((val) => (\r\n          <div className=\"asset-picker-modal-row\" key={val}>\r\n            <Button name={val} value={val} onClick={handleSubmit}>\r\n              <span className=\"symbol mx-1\">{val}</span>\r\n            </Button>\r\n          </div>\r\n        ))}\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default RebalancePeriodSelectModal;\r\n","import React, { useState } from \"react\";\r\nimport InputRange from \"react-input-range\";\r\nimport \"./EditBarTableItem.scss\";\r\nimport \"react-input-range/lib/css/index.css\";\r\n\r\nconst EditBarTableItem = ({\r\n  asset,\r\n  icon,\r\n  targetAllocation,\r\n  actualAllocation,\r\n  name,\r\n  value,\r\n  handleChange,\r\n  handleChangeComplete,\r\n}) => {\r\n  const [data, setData] = useState({\r\n    name,\r\n    value: targetAllocation,\r\n  });\r\n\r\n  const onChange = (value) => {\r\n    setData((fData) => ({ ...fData, value }));\r\n    handleChange(name, value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"EditBarTableItem\">\r\n      <div className=\"title\">\r\n        <div>{icon}</div>\r\n        <div>{asset}</div>\r\n      </div>\r\n      <div className=\"bar\">\r\n        <InputRange\r\n          maxValue={100}\r\n          minValue={0}\r\n          name={name}\r\n          value={data.value}\r\n          onChange={onChange}\r\n          onChangeComplete={handleChangeComplete}\r\n        />\r\n      </div>\r\n      <div className=\"bar-value\">\r\n        <div className=\"bar-actual-value\">{`${actualAllocation}%`}</div>\r\n        <div className=\"bar-target-value\">{`${value}%`}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditBarTableItem;\r\n","import { formatNative, formatUSD } from \"./currencyHelpers\";\r\n\r\n// accepts a list of balances\r\nexport const totalBalanceUSD = (balances) => {\r\n  const total = balances.reduce((acc, curr) => {\r\n    return acc + curr.usdValue;\r\n  }, 0);\r\n\r\n  return formatUSD(total);\r\n};\r\n\r\nexport const getTokenBalance = (balances, tokenSymbol) => {\r\n  const balance = balances.filter((bal) => bal.symbol === tokenSymbol)[0]\r\n    ? balances.filter((bal) => bal.symbol === tokenSymbol)[0].nativeValue\r\n    : 0.0;\r\n\r\n  return formatNative(balance);\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTokenBalance } from \"../helpers/balanceHelpers\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport AssetImage from \"./AssetImage\";\r\nimport \"./AssetPickerModal.scss\";\r\n\r\nconst AssetPickerModal = ({ handleAssetSelect, showModal, closeModal }) => {\r\n  const assets = useSelector((st) => st.assets);\r\n  const { balances } = useSelector((st) => st.currentUser);\r\n  const modalType = useSelector((st) => st.trades.modalType);\r\n  return (\r\n    <Modal\r\n      scrollable={true}\r\n      className=\"AssetPickerModal\"\r\n      show={showModal}\r\n      onHide={closeModal}\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Choose Asset</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        {assets.map((a) => (\r\n          <div className=\"asset-picker-modal-row\" key={a.id}>\r\n            <Button\r\n              name={modalType}\r\n              value={a.symbol}\r\n              onClick={handleAssetSelect}\r\n            >\r\n              <AssetImage symbol={a.symbol} />\r\n              <span className=\"symbol mx-1\">{a.symbol}</span>\r\n              <span className=\"token-balance mx-3\">\r\n                {getTokenBalance(balances, a.symbol)}\r\n              </span>\r\n            </Button>\r\n          </div>\r\n        ))}\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AssetPickerModal;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport {\r\n  showRebalanceAssetSelectModalInState,\r\n  closeRebalanceAssetSelectModal,\r\n} from \"../actions/rebalance\";\r\nimport EditBarTableItem from \"./EditBarTableItem\";\r\nimport AssetImage from \"./AssetImage\";\r\nimport Toggle from \"./Toggle\";\r\nimport AssetPickerModal from \"./AssetPickerModal\";\r\nimport PrimaryButton from \"./PrimaryButton\";\r\nimport \"./EditRebalanceStrategyForm.scss\";\r\n\r\nconst EditRebalanceStrategyForm = ({\r\n  cancelEdit,\r\n  rebalanceStrategyForm,\r\n  setRebalanceStrategy,\r\n  handleAddAsset,\r\n  submitStrategy,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const { showRebalanceAssetSelectModal } = useSelector((st) => st.rebalance);\r\n  const { loading } = useSelector((st) => st.general);\r\n\r\n  // handle invalid form in state\r\n  const [isInvalidForm, setIsInvalidForm] = useState(true);\r\n\r\n  const handleChange = (name, value) => {\r\n    // update the resepective asset in state when using the range slider\r\n    setRebalanceStrategy(\r\n      rebalanceStrategyForm.map((detail) =>\r\n        detail.symbol === name\r\n          ? { ...detail, symbol: name, allocationPct: value }\r\n          : detail\r\n      )\r\n    );\r\n  };\r\n\r\n  // only handle checking for valid form when the user stop dragging the range input\r\n  const handleChangeComplete = (name, value) => {\r\n    // check new strategy percent total\r\n    const pctTotal = rebalanceStrategyForm.reduce((total, curr) => {\r\n      return total + curr.allocationPct;\r\n    }, 0);\r\n\r\n    pctTotal === 100 ? setIsInvalidForm(false) : setIsInvalidForm(true);\r\n  };\r\n\r\n  const handleShowModal = () => {\r\n    dispatch(showRebalanceAssetSelectModalInState());\r\n  };\r\n\r\n  const handleCloseModal = () => dispatch(closeRebalanceAssetSelectModal());\r\n\r\n  const addAsset = (e) => {\r\n    handleAddAsset(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"barchart-wrapper\">\r\n      <form autoComplete=\"false\">\r\n        <div className=\"barchart-header\">\r\n          <Toggle\r\n            handleToggle={cancelEdit}\r\n            initialValue={\"Cancel\"}\r\n            textPrimary={`Cancel`}\r\n            textSecondary={`Cancel`}\r\n          ></Toggle>\r\n          <Button onClick={handleShowModal} className=\"add-asset-button\">\r\n            Add Asset\r\n          </Button>\r\n          <div className=\"barchart-right-title\">\r\n            <div className=\"barchart-right-title-item\">Actual</div>\r\n            <div className=\"barchart-right-title-item\">Target</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"BarTable\">\r\n          {rebalanceStrategyForm.map((bal) => (\r\n            <EditBarTableItem\r\n              key={bal.symbol}\r\n              asset={bal.symbol}\r\n              icon={<AssetImage symbol={bal.symbol} />}\r\n              targetAllocation={bal.allocationPct}\r\n              actualAllocation={bal.actualPctOfTotal}\r\n              handleChange={handleChange}\r\n              handleChangeComplete={handleChangeComplete}\r\n              name={bal.symbol}\r\n              value={bal.allocationPct}\r\n            />\r\n          ))}\r\n        </div>\r\n        <AssetPickerModal\r\n          showModal={showRebalanceAssetSelectModal}\r\n          closeModal={handleCloseModal}\r\n          handleAssetSelect={addAsset}\r\n        />\r\n        <PrimaryButton\r\n          submitFunc={submitStrategy}\r\n          textDisabled=\"Percentages must add up to 100%\"\r\n          textPrimary=\"Edit Strategy\"\r\n          loadingText=\"Editing Strategy\"\r\n          disabled={isInvalidForm}\r\n          loading={loading}\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditRebalanceStrategyForm;\r\n","import React from \"react\";\r\nimport \"./BarTableItem.scss\";\r\n\r\nconst BarTableItem = ({ asset, icon, targetAllocation, actualAllocation }) => {\r\n  return (\r\n    <div className=\"BarTableItem\">\r\n      <div className=\"title\">\r\n        <div>{icon}</div>\r\n        <div>{asset}</div>\r\n      </div>\r\n      <div className=\"bar\">\r\n        <div\r\n          className=\"bar-fill\"\r\n          style={{ width: `${actualAllocation}%` }}\r\n        ></div>\r\n      </div>\r\n      <div className=\"bar-value\">\r\n        <div className=\"bar-actual-value\">{`${actualAllocation}%`}</div>\r\n        <div className=\"bar-target-value\">{`${targetAllocation}%`}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BarTableItem;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  showRebalanceAssetSelectModalInState,\r\n  closeRebalanceAssetSelectModal,\r\n} from \"../actions/rebalance\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport BarTableItem from \"./BarTableItem\";\r\nimport AssetPickerModal from \"./AssetPickerModal\";\r\nimport \"./BarTable.scss\";\r\nimport AssetImage from \"./AssetImage\";\r\nimport Toggle from \"./Toggle\";\r\n\r\nconst BarTable = ({ handleEdit, rebalanceStrategyForm, handleAddAsset }) => {\r\n  const { showRebalanceAssetSelectModal } = useSelector((st) => st.rebalance);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleShowModal = () => {\r\n    dispatch(showRebalanceAssetSelectModalInState());\r\n  };\r\n\r\n  const handleCloseModal = () => dispatch(closeRebalanceAssetSelectModal());\r\n\r\n  const addAsset = (e) => {\r\n    handleAddAsset(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"barchart-wrapper\">\r\n      <div className=\"barchart-header\">\r\n        <Toggle\r\n          handleToggle={handleEdit}\r\n          initialValue={\"Edit Strategy\"}\r\n          textPrimary={`Edit Strategy`}\r\n          textSecondary={`Cancel`}\r\n        ></Toggle>\r\n        <Button onClick={handleShowModal} className=\"add-asset-button\">\r\n          Add Asset\r\n        </Button>\r\n        <div className=\"barchart-right-title\">\r\n          <div className=\"barchart-right-title-item\">Actual</div>\r\n          <div className=\"barchart-right-title-item\">Target</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"BarTable\">\r\n        {rebalanceStrategyForm.map((bal) => (\r\n          <BarTableItem\r\n            key={bal.symbol}\r\n            asset={bal.symbol}\r\n            icon={<AssetImage symbol={bal.symbol} />}\r\n            targetAllocation={bal.allocationPct}\r\n            actualAllocation={bal.actualPctOfTotal}\r\n          />\r\n        ))}\r\n        <AssetPickerModal\r\n          showModal={showRebalanceAssetSelectModal}\r\n          closeModal={handleCloseModal}\r\n          handleAssetSelect={addAsset}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BarTable;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  getRebalancePeriodFromAPI,\r\n  getRebalanceStrategyFromAPI,\r\n  setRebalancePeriodInAPI,\r\n  setRebalanceStrategyInAPI,\r\n  syncUserData,\r\n} from \"../actions/currentUser\";\r\nimport { rebalancePeriodTimeframes } from \"../helpers/timeframes\";\r\nimport {\r\n  showRebalancePeriodModalInState,\r\n  closeRebalancePeriodModal,\r\n  closeRebalanceAssetSelectModal,\r\n} from \"../actions/rebalance\";\r\nimport RebalancePeriodSelectModal from \"./RebalancePeriodSelectModal\";\r\nimport EditRebalanceStrategyForm from \"./EditRebalanceStrategyForm\";\r\nimport Summary from \"./Summary\";\r\nimport BarTable from \"./BarTable\";\r\nimport \"./Automate.scss\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEdit } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Automate = () => {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    user,\r\n    currentAccount,\r\n    rebalanceStrategy,\r\n    rebalancePeriod,\r\n    totalBalanceUSD,\r\n    balances,\r\n  } = useSelector((st) => st.currentUser);\r\n  const { loading } = useSelector((st) => st.general);\r\n  const { showRebalancePeriodModal } = useSelector((st) => st.rebalance);\r\n\r\n  const [isEditingStrategy, setIsEditingStrategy] = useState(false);\r\n\r\n  // form details to be able to update the rebalance strategy\r\n  const [rebalanceStrategyForm, setRebalanceStrategyForm] = useState(balances);\r\n\r\n  const handleAddAssetToStrategy = (symbol) => {\r\n    setRebalanceStrategyForm((strat) => [\r\n      ...strat,\r\n      { symbol, allocationPct: 0, actualPctOfTotal: 0 },\r\n    ]);\r\n    dispatch(closeRebalanceAssetSelectModal());\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function getRebalanceInfo() {\r\n      dispatch(getRebalancePeriodFromAPI(user.username, currentAccount.id));\r\n      dispatch(getRebalanceStrategyFromAPI(user.username, currentAccount.id));\r\n    }\r\n\r\n    getRebalanceInfo();\r\n  }, [rebalancePeriod, currentAccount.id, dispatch, user.username]);\r\n\r\n  const handleRebalancePeriodChange = (e) => {\r\n    dispatch(\r\n      setRebalancePeriodInAPI(user.username, currentAccount.id, {\r\n        rebalancePeriod: e.target.value,\r\n      })\r\n    );\r\n\r\n    dispatch(closeRebalancePeriodModal());\r\n  };\r\n\r\n  const handleShowPeriodSelectModal = () => {\r\n    dispatch(showRebalancePeriodModalInState());\r\n  };\r\n\r\n  const handleClosePeriodSelectModal = () =>\r\n    dispatch(closeRebalancePeriodModal());\r\n\r\n  const handleEditRebalanceStrategy = (e) => {\r\n    setIsEditingStrategy((edit) => !edit);\r\n  };\r\n\r\n  const handleSubmitStrategy = (e) => {\r\n    e.preventDefault();\r\n\r\n    // we only need the symbol and allocation target percentage to update the rebalance strategy\r\n    let allocations = rebalanceStrategyForm.map(\r\n      ({ symbol, allocationPct }) => ({\r\n        symbol,\r\n        percent: allocationPct.toString(),\r\n      })\r\n    );\r\n\r\n    allocations = allocations.filter((bal) => bal.percent !== \"0\");\r\n\r\n    dispatch(\r\n      setRebalanceStrategyInAPI(user.username, currentAccount.id, allocations)\r\n    );\r\n    dispatch(syncUserData(user.username, currentAccount.id));\r\n  };\r\n\r\n  const rebalancePeriodText =\r\n    rebalancePeriod === 0\r\n      ? \"None\"\r\n      : rebalancePeriodTimeframes.has(rebalancePeriod)\r\n      ? rebalancePeriodTimeframes.get(rebalancePeriod)\r\n      : `${rebalancePeriod} hours`;\r\n\r\n  if (!currentAccount) {\r\n    return (\r\n      <div className=\"Dashboard container text-center\">\r\n        <h2>Please connect to an account</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"Automate container text-center\">\r\n      <div className=\"summary\">\r\n        <button\r\n          className=\"summary-rebalance-period\"\r\n          onClick={handleShowPeriodSelectModal}\r\n        >\r\n          <div className=\"edit-icon-wrapper\">\r\n            <FontAwesomeIcon icon={faEdit} className=\"edit-icon\" />\r\n          </div>\r\n          <Summary\r\n            title={rebalancePeriodText}\r\n            subTitle={\"Current Rebalance Period\"}\r\n            loading={loading}\r\n          />\r\n        </button>\r\n        <Summary title={totalBalanceUSD} subTitle={\"Portfolio Balance\"} />\r\n      </div>\r\n\r\n      <RebalancePeriodSelectModal\r\n        showModal={showRebalancePeriodModal}\r\n        closeModal={handleClosePeriodSelectModal}\r\n        handleSubmit={handleRebalancePeriodChange}\r\n      />\r\n      <div className=\"bartable-wrapper\">\r\n        {isEditingStrategy ? (\r\n          <EditRebalanceStrategyForm\r\n            rebalanceStrategyForm={rebalanceStrategyForm}\r\n            cancelEdit={handleEditRebalanceStrategy}\r\n            handleAddAsset={handleAddAssetToStrategy}\r\n            rebalanceStrategy={rebalanceStrategy}\r\n            setRebalanceStrategy={setRebalanceStrategyForm}\r\n            submitStrategy={handleSubmitStrategy}\r\n          />\r\n        ) : (\r\n          <BarTable\r\n            handleEdit={handleEditRebalanceStrategy}\r\n            rebalanceStrategyForm={rebalanceStrategyForm}\r\n            handleAddAsset={handleAddAssetToStrategy}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Automate;\r\n","import BackendAPI from \"../components/BackendAPI\";\r\nimport { formatNative } from \"./currencyHelpers\";\r\n\r\nexport const getExchangeRateValue = async (\r\n  asset1,\r\n  asset2,\r\n  asset1amount = 1,\r\n  exchange\r\n) => {\r\n  if (asset1 === asset2) return asset1amount;\r\n\r\n  const tickers = await BackendAPI.getExchangeTickers(exchange);\r\n\r\n  let asset1PriceUsd;\r\n  let asset2PriceUsd;\r\n\r\n  for (const ticker of tickers) {\r\n    if (ticker.symbol === asset1) {\r\n      asset1PriceUsd = ticker.priceUsd;\r\n    }\r\n\r\n    if (ticker.symbol === asset2) {\r\n      asset2PriceUsd = ticker.priceUsd;\r\n    }\r\n  }\r\n\r\n  // calculate how much asset2 you can get for asset 1\r\n  const exchangeRateValue = (asset1PriceUsd * asset1amount) / asset2PriceUsd;\r\n  return formatNative(exchangeRateValue);\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { InputGroup, FormControl, Button } from \"react-bootstrap\";\r\nimport {\r\n  showModal as dispatchShowModal,\r\n  closeModal,\r\n  updateModalType,\r\n} from \"../actions/trades\";\r\nimport AssetPickerModal from \"./AssetPickerModal\";\r\nimport AssetImage from \"./AssetImage\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./SwapAsset.scss\";\r\n\r\nconst SwapAsset = ({\r\n  asset,\r\n  type,\r\n  value,\r\n  balance,\r\n  onValueChange,\r\n  onAssetChange,\r\n  onMaxValueSelect,\r\n  disabled,\r\n}) => {\r\n  const { showTradeModal } = useSelector((st) => st.trades);\r\n  const dispatch = useDispatch();\r\n\r\n  // handling the modal showing and closing and sending data to store\r\n  const handleShowModal = () => {\r\n    dispatch(dispatchShowModal());\r\n    dispatch(updateModalType(type));\r\n  };\r\n  const handleCloseModal = () => dispatch(closeModal());\r\n\r\n  return (\r\n    <div className=\"SwapAsset\">\r\n      <div className=\"top-wrapper\">\r\n        <p>{type === \"input\" ? \"From\" : \"To (estimate)\"}</p>\r\n        <p>Balance: {balance}</p>\r\n      </div>\r\n      <div className=\"bottom-wrapper\">\r\n        <InputGroup className=\"token-amount\">\r\n          <FormControl\r\n            className=\"token-amount-input\"\r\n            placeholder=\"0.0\"\r\n            name={type}\r\n            value={value}\r\n            asset={asset}\r\n            onChange={onValueChange}\r\n            disabled={disabled}\r\n          />\r\n        </InputGroup>\r\n        {type === \"input\" && (\r\n          <Button onClick={onMaxValueSelect} className=\"max-button\">\r\n            Max\r\n          </Button>\r\n        )}\r\n        <Button\r\n          className={\r\n            asset === \"Select a token\"\r\n              ? \"asset-not-selected-button\"\r\n              : \"asset-select-button\"\r\n          }\r\n          onClick={handleShowModal}\r\n        >\r\n          <span className=\"token-symbol-container\">\r\n            {asset !== \"Select a token\" && <AssetImage symbol={asset} />}\r\n            <span className=\"token-symbol\">{asset}</span>\r\n            <FontAwesomeIcon icon={faAngleDown} />\r\n          </span>\r\n        </Button>\r\n      </div>\r\n      <AssetPickerModal\r\n        showModal={showTradeModal}\r\n        closeModal={handleCloseModal}\r\n        handleAssetSelect={onAssetChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SwapAsset;\r\n","import {\r\n  FETCH_TRADES,\r\n  TRADE_SELECT_INPUT,\r\n  TRADE_SELECT_OUTPUT,\r\n  SHOW_TRADE_MODAL,\r\n  CLOSE_TRADE_MODAL,\r\n  TRADE_SELECT_INPUT_VALUE,\r\n  TRADE_SELECT_OUTPUT_VALUE,\r\n  UPDATE_MODAL_TYPE,\r\n  UPDATE_LATEST_TRADE,\r\n  SUBMIT_TRADE_START,\r\n  SUBMIT_TRADE_END,\r\n} from \"./types\";\r\nimport BackendAPI from \"../components/BackendAPI\";\r\nimport { showErrors, startLoad, stopLoad } from \"./general\";\r\n\r\nexport function submitTradeInAPI(username, accountId, data) {\r\n  return async function (dispatch) {\r\n    dispatch(submittingTrade());\r\n    try {\r\n      const res = await BackendAPI.createTrade(username, accountId, data);\r\n\r\n      dispatch(updateLatestTrade(res));\r\n      return dispatch(endTradeSubmit());\r\n    } catch (err) {\r\n      dispatch(showErrors(err));\r\n      dispatch(endTradeSubmit());\r\n    }\r\n  };\r\n}\r\n\r\nfunction submittingTrade() {\r\n  return {\r\n    type: SUBMIT_TRADE_START,\r\n  };\r\n}\r\n\r\nfunction endTradeSubmit() {\r\n  return {\r\n    type: SUBMIT_TRADE_END,\r\n  };\r\n}\r\n\r\nfunction updateLatestTrade(trade) {\r\n  return {\r\n    type: UPDATE_LATEST_TRADE,\r\n    trade,\r\n  };\r\n}\r\n\r\nexport function fetchActiveTrades(username, account) {\r\n  return async function (dispatch) {\r\n    dispatch(startLoad());\r\n    const response = await BackendAPI.getTrades(username, account);\r\n    dispatch(activeTradesFetched(response));\r\n    return dispatch(stopLoad());\r\n  };\r\n}\r\n\r\nfunction activeTradesFetched(activeTrades) {\r\n  return {\r\n    type: FETCH_TRADES,\r\n    activeTrades,\r\n  };\r\n}\r\n\r\nexport function tradeSelectInput(symbol) {\r\n  return async function (dispatch) {\r\n    return dispatch(tradeInputSelected(symbol));\r\n  };\r\n}\r\n\r\nfunction tradeInputSelected(symbol) {\r\n  return {\r\n    type: TRADE_SELECT_INPUT,\r\n    symbol,\r\n  };\r\n}\r\n\r\nexport function tradeSelectOutput(symbol) {\r\n  return async function (dispatch) {\r\n    return dispatch(tradeOutputSelected(symbol));\r\n  };\r\n}\r\n\r\nfunction tradeOutputSelected(symbol) {\r\n  return {\r\n    type: TRADE_SELECT_OUTPUT,\r\n    symbol,\r\n  };\r\n}\r\n\r\nexport function updateTradeInputValue(value) {\r\n  return async function (dispatch) {\r\n    return dispatch(tradeInputValueSelected(value));\r\n  };\r\n}\r\n\r\nfunction tradeInputValueSelected(value) {\r\n  return {\r\n    type: TRADE_SELECT_INPUT_VALUE,\r\n    value,\r\n  };\r\n}\r\n\r\nexport function updateTradeOutputValue(value) {\r\n  return async function (dispatch) {\r\n    return dispatch(tradeOutputValueSelected(value));\r\n  };\r\n}\r\n\r\nfunction tradeOutputValueSelected(value) {\r\n  return {\r\n    type: TRADE_SELECT_OUTPUT_VALUE,\r\n    value,\r\n  };\r\n}\r\nexport function showModal() {\r\n  return {\r\n    type: SHOW_TRADE_MODAL,\r\n  };\r\n}\r\n\r\nexport function closeModal() {\r\n  return {\r\n    type: CLOSE_TRADE_MODAL,\r\n  };\r\n}\r\n\r\nexport function updateModalType(type) {\r\n  return async function (dispatch) {\r\n    return dispatch(syncModalType(type));\r\n  };\r\n}\r\n\r\nfunction syncModalType(modalType) {\r\n  return {\r\n    type: UPDATE_MODAL_TYPE,\r\n    modalType,\r\n  };\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\r\n// import _ from \"lodash\";\r\nimport { getExchangeRateValue } from \"../helpers/exchangeRates\";\r\nimport PrimaryButton from \"./PrimaryButton\";\r\nimport SwapAsset from \"./SwapAsset\";\r\nimport Alert from \"./Alert\";\r\nimport { submitTradeInAPI, closeModal } from \"../actions/trades\";\r\nimport { getTokenBalance } from \"../helpers/balanceHelpers\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowDown } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./TradeWidget.scss\";\r\n\r\nconst TradeWidget = () => {\r\n  const dispatch = useDispatch();\r\n  const { balances } = useSelector((st) => st.currentUser);\r\n  const { submittingTrade } = useSelector((st) => st.trades);\r\n  const currentUser = useSelector((st) => st.currentUser, shallowEqual);\r\n\r\n  const [tradeDetails, setTradeDetails] = useState({\r\n    input: { asset: \"ETH\", value: \"0.0\" },\r\n    output: { asset: \"Select a token\", value: \"0.0\" },\r\n    tradeErrors: [],\r\n  });\r\n\r\n  const [isInvalidForm, setIsInvalidForm] = useState(true);\r\n\r\n  const { input, output } = tradeDetails;\r\n\r\n  // delay the conversion function on user input\r\n  // const delayedGetExchangeRateValue = useCallback(\r\n  //   _.debounce(getExchangeRateValue, 3000),\r\n  //   [input.asset, input.value, output.asset]\r\n  // );\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    // submit with proper trade details\r\n    const trade = {\r\n      userId: currentUser.shrimpy_user_id,\r\n      accountId: currentUser.currentAccount.id,\r\n      fromSymbol: input.asset,\r\n      toSymbol: output.asset,\r\n      amount: input.value,\r\n    };\r\n\r\n    try {\r\n      dispatch(\r\n        submitTradeInAPI(\r\n          currentUser.user.username,\r\n          currentUser.currentAccount.id,\r\n          trade\r\n        )\r\n      );\r\n    } catch (errors) {\r\n      setTradeDetails((trade) => ({\r\n        ...trade,\r\n        tradeErrors: [errors],\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleValueChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    setTradeDetails((fData) => ({\r\n      ...fData,\r\n      [name]: {\r\n        ...fData[name],\r\n        value: value,\r\n      },\r\n    }));\r\n    setIsInvalidForm(false);\r\n  };\r\n\r\n  const handleAssetChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setTradeDetails((fData) => ({\r\n      ...fData,\r\n      [name]: {\r\n        ...fData[name],\r\n        asset: value,\r\n      },\r\n    }));\r\n    dispatch(closeModal());\r\n  };\r\n\r\n  const handleMaxValueSelect = (e) => {\r\n    setTradeDetails((fData) => ({\r\n      ...fData,\r\n      input: {\r\n        ...input,\r\n        value: getTokenBalance(balances, input.asset),\r\n      },\r\n    }));\r\n    setIsInvalidForm(false);\r\n  };\r\n\r\n  const inputBalance = balances\r\n    ? getTokenBalance(balances, tradeDetails.input.asset)\r\n    : 0;\r\n\r\n  const outputBalance = balances\r\n    ? getTokenBalance(balances, tradeDetails.output.asset)\r\n    : 0;\r\n\r\n  useEffect(() => {\r\n    async function getOutputValue() {\r\n      if (!isInvalidForm) {\r\n        const value = await getExchangeRateValue(\r\n          input.asset,\r\n          output.asset,\r\n          input.value,\r\n          currentUser.currentAccount.exchange\r\n        );\r\n\r\n        setTradeDetails((fData) => ({\r\n          ...fData,\r\n          output: { ...output, value },\r\n        }));\r\n      }\r\n    }\r\n    getOutputValue();\r\n  }, [input.asset, input.value, currentUser, isInvalidForm, output.asset]);\r\n\r\n  if (!balances.length) {\r\n    return (\r\n      <div className=\"container text-center\">\r\n        <h2>Please connect to an account</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"TradeWidget\">\r\n      <form autoComplete=\"off\">\r\n        <SwapAsset\r\n          asset={input.asset}\r\n          type={\"input\"}\r\n          value={input.value}\r\n          balance={inputBalance}\r\n          onValueChange={handleValueChange}\r\n          onAssetChange={handleAssetChange}\r\n          onMaxValueSelect={handleMaxValueSelect}\r\n        />\r\n\r\n        <div\r\n          className={`arrow-break my-2 ${isInvalidForm ? \"invalid\" : \"valid\"}`}\r\n        >\r\n          <FontAwesomeIcon icon={faArrowDown} />\r\n        </div>\r\n\r\n        <SwapAsset\r\n          asset={output.asset}\r\n          type={\"output\"}\r\n          value={output.value}\r\n          balance={outputBalance}\r\n          onValueChange={handleValueChange}\r\n          onAssetChange={handleAssetChange}\r\n          disabled={true}\r\n        />\r\n\r\n        {tradeDetails.tradeErrors.length ? (\r\n          <Alert danger=\"danger\" messages={tradeDetails.tradeErrors} />\r\n        ) : null}\r\n\r\n        <PrimaryButton\r\n          submitFunc={handleSubmit}\r\n          textDisabled=\"Swap\"\r\n          textPrimary=\"Swap\"\r\n          loadingText=\"Swapping...\"\r\n          disabled={isInvalidForm}\r\n          loading={submittingTrade}\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TradeWidget;\r\n","import React from \"react\";\r\nimport TradeWidget from \"./TradeWidget\";\r\n\r\nconst Trade = () => {\r\n  return (\r\n    <div className=\"Trade pt-5 text-center justify-content-center\">\r\n      <TradeWidget />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Trade;\r\n","import React from \"react\";\r\n\r\nconst Backtest = () => {\r\n  return (\r\n    <div className=\"container text-center\">\r\n      <h2>Coming soon...</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Backtest;\r\n","import React from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport Home from \"./Home\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\nimport Login from \"./Login\";\r\nimport Exchanges from \"./Exchanges\";\r\nimport ExchangeConnection from \"./ExchangeConnection\";\r\nimport Dashboard from \"./Dashboard\";\r\nimport Automate from \"./Automate\";\r\nimport Trade from \"./Trade\";\r\nimport Backtest from \"./Backtest\";\r\n\r\nconst Routes = ({ setToken }) => {\r\n  return (\r\n    <div className=\"Routes\">\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n        </Route>\r\n\r\n        <Route exact path=\"/login\">\r\n          <Login setToken={setToken} />\r\n        </Route>\r\n\r\n        <PrivateRoute exact path=\"/exchanges\">\r\n          <Exchanges />\r\n        </PrivateRoute>\r\n\r\n        <PrivateRoute exact path=\"/exchanges/:exchangeName\">\r\n          <ExchangeConnection />\r\n        </PrivateRoute>\r\n\r\n        <PrivateRoute exact path=\"/dashboard\">\r\n          <Dashboard />\r\n        </PrivateRoute>\r\n\r\n        <PrivateRoute exact path=\"/automate\">\r\n          <Automate />\r\n        </PrivateRoute>\r\n\r\n        <PrivateRoute exact path=\"/trade\">\r\n          <Trade />\r\n        </PrivateRoute>\r\n\r\n        <Route exact path=\"/backtest\">\r\n          <Backtest />\r\n        </Route>\r\n\r\n        <Redirect to=\"/\" />\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { decode } from \"jsonwebtoken\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Navigation from \"./Navigation\";\nimport Routes from \"./Routes\";\nimport \"./App.scss\";\nimport { logoutUserInState, syncUserData } from \"../actions/currentUser\";\n\nexport const TOKEN_STORAGE_ID = \"cfinance-token\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n  useEffect(() => {\n    async function syncUserInfo() {\n      if (token) {\n        const { username } = decode(token);\n        dispatch(syncUserData(username));\n      }\n    }\n    syncUserInfo();\n  }, [token, dispatch]);\n\n  const handleLogout = () => {\n    dispatch(logoutUserInState());\n    setToken(null);\n  };\n\n  return (\n    <div className=\"App\">\n      <Navigation logout={handleLogout} />\n      <p className=\"text-center lead mt-3\">\n        This project is in beta. Use at your own risk.\n      </p>\n      <Routes setToken={setToken} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  UPDATE_CURRENT_USER,\r\n  LOGOUT_CURRENT_USER,\r\n  AUTH_SUCCESS,\r\n  ACCOUNT_CREATED,\r\n  ACCOUNT_CREATED_SUCCESS,\r\n  UPDATE_CURRENT_ACCOUNT,\r\n  FETCH_ACCOUNTS,\r\n  FETCH_BALANCES,\r\n  FETCH_PERMISSIONS,\r\n  PERMISSIONS_UPDATED,\r\n  START_CREATE_ACCOUNT,\r\n  END_CREATE_ACCOUNT,\r\n  ACCOUNT_DELETED,\r\n  USER_DATA_UPDATED,\r\n  RESET_USER_ACCOUNT_INFO,\r\n  FETCH_BALANCE_HISTORY,\r\n  FETCH_REBALANCE_PERIOD,\r\n  REBALANCE_PERIOD_UPDATED,\r\n  REBALANCE_INITIATED,\r\n  FETCH_REBALANCE_STRATEGY,\r\n  REBALANCE_STRATEGY_UPDATED,\r\n} from \"../actions/types\";\r\nimport { totalBalanceUSD } from \"../helpers/balanceHelpers\";\r\n\r\nconst INITIAL_STATE = {\r\n  accounts: [],\r\n  notCurrentAccounts: [],\r\n  currentAccount: null,\r\n  user: null,\r\n  permissions: null,\r\n  permissionsUpdated: false,\r\n  balances: [],\r\n  balanceHistory: [],\r\n};\r\n\r\nfunction sortByAssetBalance(balances) {\r\n  return balances.sort((a, b) => b.usdValue - a.usdValue);\r\n}\r\n\r\nexport default function rootReducer(state = INITIAL_STATE, action) {\r\n  switch (action.type) {\r\n    case UPDATE_CURRENT_USER:\r\n      return {\r\n        ...state,\r\n        user: action.user,\r\n      };\r\n    case FETCH_ACCOUNTS:\r\n      return {\r\n        ...state,\r\n        accounts: action.accounts,\r\n      };\r\n    case FETCH_BALANCES:\r\n      return {\r\n        ...state,\r\n        balances: sortByAssetBalance(action.balances),\r\n        totalBalanceUSD: totalBalanceUSD([...action.balances]),\r\n      };\r\n    case FETCH_BALANCE_HISTORY:\r\n      return { ...state, balanceHistory: action.balanceHistory };\r\n    case UPDATE_CURRENT_ACCOUNT:\r\n      return { ...state, ...state.user, currentAccount: action.account };\r\n    case START_CREATE_ACCOUNT:\r\n      return { ...state, creatingAccount: true };\r\n    case END_CREATE_ACCOUNT:\r\n      return { ...state, creatingAccount: false };\r\n    case ACCOUNT_CREATED:\r\n      return { ...state, accountId: action.accountId };\r\n    case ACCOUNT_DELETED:\r\n      return { ...state, accountDeleted: action.accountId };\r\n    case ACCOUNT_CREATED_SUCCESS:\r\n      return { ...state, accountCreated: action.accountName };\r\n    case FETCH_PERMISSIONS:\r\n      return { ...state, permissions: action.permissions };\r\n    case PERMISSIONS_UPDATED:\r\n      return { ...state, permissions: action.permissions };\r\n    case LOGOUT_CURRENT_USER:\r\n      return INITIAL_STATE;\r\n    case AUTH_SUCCESS:\r\n      return { ...state, authSuccess: true };\r\n    case USER_DATA_UPDATED:\r\n      return { ...state, userDataUpdatedAt: Date.now() };\r\n    case RESET_USER_ACCOUNT_INFO:\r\n      return {\r\n        ...state,\r\n        accounts: [],\r\n        balances: [],\r\n        balanceHistory: [],\r\n        notCurrentAccounts: [],\r\n        currentAccount: null,\r\n        permissions: null,\r\n        rebalancePeriod: null,\r\n        rebalanceStrategy: null,\r\n      };\r\n\r\n    case FETCH_REBALANCE_PERIOD:\r\n      return { ...state, rebalancePeriod: action.rebalancePeriod };\r\n    case REBALANCE_PERIOD_UPDATED:\r\n      return { ...state, rebalancePeriod: action.rebalancePeriod };\r\n    case REBALANCE_INITIATED:\r\n      return { ...state, rebalanceInitiated: action.message };\r\n    case FETCH_REBALANCE_STRATEGY:\r\n      return { ...state, rebalanceStrategy: action.rebalanceStrategy };\r\n    case REBALANCE_STRATEGY_UPDATED:\r\n      return { ...state, rebalanceStrategy: action.rebalanceStrategy };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { FETCH_EXCHANGES } from \"../actions/types\";\r\n\r\nconst INITIAL_STATE = [];\r\n\r\nfunction sortByExchangeName(exchanges) {\r\n  return exchanges.sort((a, b) => b.exchange - a.exchange);\r\n}\r\n\r\nexport default function rootReducer(state = INITIAL_STATE, action) {\r\n  switch (action.type) {\r\n    case FETCH_EXCHANGES:\r\n      return sortByExchangeName([...action.exchanges]);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { FETCH_EXCHANGE_ASSETS, LOGOUT_CURRENT_USER } from \"../actions/types\";\r\n\r\nconst INITIAL_STATE = [];\r\n\r\nfunction sortByExchangeAssetSymbols(assets) {\r\n  return assets.sort((a, b) => b.symbol - a.symbol);\r\n}\r\n\r\nexport default function rootReducer(state = INITIAL_STATE, action) {\r\n  switch (action.type) {\r\n    case FETCH_EXCHANGE_ASSETS:\r\n      return sortByExchangeAssetSymbols([...action.assets]);\r\n    case LOGOUT_CURRENT_USER:\r\n      return INITIAL_STATE;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { FETCH_USERS } from \"../actions/types\";\r\n\r\nconst INITIAL_STATE = {\r\n  allUsers: [],\r\n};\r\n\r\nexport default function rootReducer(state = INITIAL_STATE, action) {\r\n  switch (action.type) {\r\n    case FETCH_USERS:\r\n      return { ...state, allUsers: action.users };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  SHOW_ERRORS,\r\n  SHOW_SPINNER,\r\n  END_SHOW_SPINNER,\r\n  RESET_ERRORS,\r\n} from \"../actions/types\";\r\n\r\nconst INITIAL_STATE = { loading: false, errors: [] };\r\n\r\nexport default function rootReducer(state = INITIAL_STATE, action) {\r\n  switch (action.type) {\r\n    case SHOW_ERRORS:\r\n      return { ...state, errors: action.msgs };\r\n    case RESET_ERRORS:\r\n      return { ...state, errors: [] };\r\n    case SHOW_SPINNER:\r\n      return { ...state, loading: true };\r\n    case END_SHOW_SPINNER:\r\n      return { ...state, loading: false };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  FETCH_TRADES,\r\n  TRADE_SELECT_INPUT,\r\n  TRADE_SELECT_OUTPUT,\r\n  SHOW_TRADE_MODAL,\r\n  CLOSE_TRADE_MODAL,\r\n  LOGOUT_CURRENT_USER,\r\n  UPDATE_TRADE_DETAILS,\r\n  UPDATE_MODAL_TYPE,\r\n  TRADE_SELECT_INPUT_VALUE,\r\n  TRADE_SELECT_OUTPUT_VALUE,\r\n  UPDATE_LATEST_TRADE,\r\n  SUBMIT_TRADE_END,\r\n  SUBMIT_TRADE_START,\r\n} from \"../actions/types\";\r\n\r\nconst INITIAL_STATE = {};\r\n\r\nexport default function rootReducer(state = INITIAL_STATE, action) {\r\n  switch (action.type) {\r\n    case SHOW_TRADE_MODAL:\r\n      return { ...state, showTradeModal: true };\r\n    case CLOSE_TRADE_MODAL:\r\n      return { ...state, showTradeModal: false };\r\n    case TRADE_SELECT_INPUT:\r\n      return { ...state, input: { ...state.input, symbol: action.symbol } };\r\n    case TRADE_SELECT_INPUT_VALUE:\r\n      return { ...state, input: { ...state.input, valueNative: action.value } };\r\n    case TRADE_SELECT_OUTPUT:\r\n      return { ...state, output: { ...state.output, symbol: action.symbol } };\r\n    case TRADE_SELECT_OUTPUT_VALUE:\r\n      return {\r\n        ...state,\r\n        output: { ...state.output, valueNative: action.value },\r\n      };\r\n    case UPDATE_TRADE_DETAILS:\r\n      return { ...state, tradeDetails: action.tradeDetails };\r\n    case UPDATE_MODAL_TYPE:\r\n      return { ...state, modalType: action.modalType };\r\n    case FETCH_TRADES:\r\n      return { ...state, filledTrades: action.trades };\r\n    case UPDATE_LATEST_TRADE:\r\n      return { ...state, latestTrade: action.trade };\r\n    case SUBMIT_TRADE_START:\r\n      return { ...state, submittingTrade: true };\r\n    case SUBMIT_TRADE_END:\r\n      return { ...state, submittingTrade: false };\r\n    case LOGOUT_CURRENT_USER:\r\n      return INITIAL_STATE;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  SHOW_REBALANCE_ASSET_SELECT_MODAL,\r\n  SHOW_REBALANCE_PERIOD_MODAL,\r\n  CLOSE_REBALANCE_ASSET_SELECT_MODAL,\r\n  CLOSE_REBALANCE_PERIOD_MODAL,\r\n} from \"../actions/types\";\r\n\r\nconst INITIAL_STATE = {};\r\n\r\nexport default function rootReducer(state = INITIAL_STATE, action) {\r\n  switch (action.type) {\r\n    case SHOW_REBALANCE_PERIOD_MODAL:\r\n      return { ...state, showRebalancePeriodModal: true };\r\n    case CLOSE_REBALANCE_PERIOD_MODAL:\r\n      return { ...state, showRebalancePeriodModal: false };\r\n    case SHOW_REBALANCE_ASSET_SELECT_MODAL:\r\n      return { ...state, showRebalanceAssetSelectModal: true };\r\n    case CLOSE_REBALANCE_ASSET_SELECT_MODAL:\r\n      return { ...state, showRebalanceAssetSelectModal: false };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport currentUser from \"./currentUser\";\r\nimport exchanges from \"./exchanges\";\r\nimport assets from \"./assets\";\r\nimport users from \"./users\";\r\nimport general from \"./general\";\r\nimport trades from \"./trades\";\r\nimport rebalance from \"./rebalance\";\r\n\r\nexport default combineReducers({\r\n  currentUser,\r\n  exchanges,\r\n  users,\r\n  general,\r\n  assets,\r\n  trades,\r\n  rebalance,\r\n});\r\n","import { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport autoMergeLevel2 from \"redux-persist/lib/stateReconciler/autoMergeLevel2\";\r\n\r\nimport thunk from \"redux-thunk\";\r\nimport root from \"../reducers/root\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\n\r\n// we have nested objects, so we use autoMergeLevel2, and use local storage to persist the redux store\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n  stateReconciler: autoMergeLevel2,\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, root);\r\n\r\nexport const store = createStore(\r\n  persistedReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport const persistedStore = persistStore(store);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { store, persistedStore } from \"./components/store\";\n\n/**\n * Using PersistGate component from redux-persist to persist the redux store/state across refreshes\n */\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <PersistGate loading={null} persistor={persistedStore}>\n        <App />\n      </PersistGate>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}